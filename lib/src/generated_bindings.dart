// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> TA_GetVersionString() {
    return _TA_GetVersionString();
  }

  late final _TA_GetVersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionString');
  late final _TA_GetVersionString =
      _TA_GetVersionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionMajor() {
    return _TA_GetVersionMajor();
  }

  late final _TA_GetVersionMajorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionMajor');
  late final _TA_GetVersionMajor =
      _TA_GetVersionMajorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionMinor() {
    return _TA_GetVersionMinor();
  }

  late final _TA_GetVersionMinorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionMinor');
  late final _TA_GetVersionMinor =
      _TA_GetVersionMinorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionBuild() {
    return _TA_GetVersionBuild();
  }

  late final _TA_GetVersionBuildPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionBuild');
  late final _TA_GetVersionBuild =
      _TA_GetVersionBuildPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionExtra() {
    return _TA_GetVersionExtra();
  }

  late final _TA_GetVersionExtraPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionExtra');
  late final _TA_GetVersionExtra =
      _TA_GetVersionExtraPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionDate() {
    return _TA_GetVersionDate();
  }

  late final _TA_GetVersionDatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionDate');
  late final _TA_GetVersionDate =
      _TA_GetVersionDatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TA_GetVersionTime() {
    return _TA_GetVersionTime();
  }

  late final _TA_GetVersionTimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TA_GetVersionTime');
  late final _TA_GetVersionTime =
      _TA_GetVersionTimePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void TA_SetRetCodeInfo(
    TA_RetCode theRetCode,
    ffi.Pointer<TA_RetCodeInfo> retCodeInfo,
  ) {
    return _TA_SetRetCodeInfo(
      theRetCode.value,
      retCodeInfo,
    );
  }

  late final _TA_SetRetCodeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt,
              ffi.Pointer<TA_RetCodeInfo>)>>('TA_SetRetCodeInfo');
  late final _TA_SetRetCodeInfo = _TA_SetRetCodeInfoPtr.asFunction<
      void Function(int, ffi.Pointer<TA_RetCodeInfo>)>();

  TA_RetCode TA_Initialize() {
    return TA_RetCode.fromValue(_TA_Initialize());
  }

  late final _TA_InitializePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('TA_Initialize');
  late final _TA_Initialize = _TA_InitializePtr.asFunction<int Function()>();

  TA_RetCode TA_Shutdown() {
    return TA_RetCode.fromValue(_TA_Shutdown());
  }

  late final _TA_ShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('TA_Shutdown');
  late final _TA_Shutdown = _TA_ShutdownPtr.asFunction<int Function()>();

  TA_RetCode TA_ACCBANDS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outRealUpperBand,
    ffi.Pointer<ffi.Double> outRealMiddleBand,
    ffi.Pointer<ffi.Double> outRealLowerBand,
  ) {
    return TA_RetCode.fromValue(_TA_ACCBANDS(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outRealUpperBand,
      outRealMiddleBand,
      outRealLowerBand,
    ));
  }

  late final _TA_ACCBANDSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_ACCBANDS');
  late final _TA_ACCBANDS = _TA_ACCBANDSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ACCBANDS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outRealUpperBand,
    ffi.Pointer<ffi.Double> outRealMiddleBand,
    ffi.Pointer<ffi.Double> outRealLowerBand,
  ) {
    return TA_RetCode.fromValue(_TA_S_ACCBANDS(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outRealUpperBand,
      outRealMiddleBand,
      outRealLowerBand,
    ));
  }

  late final _TA_S_ACCBANDSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ACCBANDS');
  late final _TA_S_ACCBANDS = _TA_S_ACCBANDSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ACCBANDS_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ACCBANDS_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ACCBANDS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_ACCBANDS_Lookback');
  late final _TA_ACCBANDS_Lookback =
      _TA_ACCBANDS_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ACOS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ACOS(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ACOSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ACOS');
  late final _TA_ACOS = _TA_ACOSPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ACOS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ACOS(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ACOSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ACOS');
  late final _TA_S_ACOS = _TA_S_ACOSPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ACOS_Lookback() {
    return _TA_ACOS_Lookback();
  }

  late final _TA_ACOS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_ACOS_Lookback');
  late final _TA_ACOS_Lookback =
      _TA_ACOS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_AD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Double> inVolume,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_AD(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ADPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_AD');
  late final _TA_AD = _TA_ADPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_AD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Float> inVolume,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_AD(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ADPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_AD');
  late final _TA_S_AD = _TA_S_ADPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_AD_Lookback() {
    return _TA_AD_Lookback();
  }

  late final _TA_AD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_AD_Lookback');
  late final _TA_AD_Lookback = _TA_AD_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_ADD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ADD(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ADDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ADD');
  late final _TA_ADD = _TA_ADDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ADD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ADD(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ADDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ADD');
  late final _TA_S_ADD = _TA_S_ADDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ADD_Lookback() {
    return _TA_ADD_Lookback();
  }

  late final _TA_ADD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_ADD_Lookback');
  late final _TA_ADD_Lookback =
      _TA_ADD_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_ADOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Double> inVolume,
    int optInFastPeriod,
    int optInSlowPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ADOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      optInFastPeriod,
      optInSlowPeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ADOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ADOSC');
  late final _TA_ADOSC = _TA_ADOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ADOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Float> inVolume,
    int optInFastPeriod,
    int optInSlowPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ADOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      optInFastPeriod,
      optInSlowPeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ADOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ADOSC');
  late final _TA_S_ADOSC = _TA_S_ADOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ADOSC_Lookback(
    int optInFastPeriod,
    int optInSlowPeriod,
  ) {
    return _TA_ADOSC_Lookback(
      optInFastPeriod,
      optInSlowPeriod,
    );
  }

  late final _TA_ADOSC_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'TA_ADOSC_Lookback');
  late final _TA_ADOSC_Lookback =
      _TA_ADOSC_LookbackPtr.asFunction<int Function(int, int)>();

  TA_RetCode TA_ADX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ADX(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ADXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ADX');
  late final _TA_ADX = _TA_ADXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ADX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ADX(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ADXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ADX');
  late final _TA_S_ADX = _TA_S_ADXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ADX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ADX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ADX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_ADX_Lookback');
  late final _TA_ADX_Lookback =
      _TA_ADX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ADXR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ADXR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ADXRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ADXR');
  late final _TA_ADXR = _TA_ADXRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ADXR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ADXR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ADXRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ADXR');
  late final _TA_S_ADXR = _TA_S_ADXRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ADXR_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ADXR_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ADXR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_ADXR_Lookback');
  late final _TA_ADXR_Lookback =
      _TA_ADXR_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_APO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_APO(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_APOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_APO');
  late final _TA_APO = _TA_APOPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_APO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_APO(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_APOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_APO');
  late final _TA_S_APO = _TA_S_APOPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_APO_Lookback(
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
  ) {
    return _TA_APO_Lookback(
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
    );
  }

  late final _TA_APO_LookbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.UnsignedInt)>>(
      'TA_APO_Lookback');
  late final _TA_APO_Lookback =
      _TA_APO_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_AROON(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outAroonDown,
    ffi.Pointer<ffi.Double> outAroonUp,
  ) {
    return TA_RetCode.fromValue(_TA_AROON(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outAroonDown,
      outAroonUp,
    ));
  }

  late final _TA_AROONPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_AROON');
  late final _TA_AROON = _TA_AROONPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_AROON(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outAroonDown,
    ffi.Pointer<ffi.Double> outAroonUp,
  ) {
    return TA_RetCode.fromValue(_TA_S_AROON(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outAroonDown,
      outAroonUp,
    ));
  }

  late final _TA_S_AROONPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_AROON');
  late final _TA_S_AROON = _TA_S_AROONPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_AROON_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_AROON_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_AROON_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_AROON_Lookback');
  late final _TA_AROON_Lookback =
      _TA_AROON_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_AROONOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_AROONOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_AROONOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_AROONOSC');
  late final _TA_AROONOSC = _TA_AROONOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_AROONOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_AROONOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_AROONOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_AROONOSC');
  late final _TA_S_AROONOSC = _TA_S_AROONOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_AROONOSC_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_AROONOSC_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_AROONOSC_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_AROONOSC_Lookback');
  late final _TA_AROONOSC_Lookback =
      _TA_AROONOSC_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ASIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ASIN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ASINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ASIN');
  late final _TA_ASIN = _TA_ASINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ASIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ASIN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ASINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ASIN');
  late final _TA_S_ASIN = _TA_S_ASINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ASIN_Lookback() {
    return _TA_ASIN_Lookback();
  }

  late final _TA_ASIN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_ASIN_Lookback');
  late final _TA_ASIN_Lookback =
      _TA_ASIN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_ATAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ATAN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ATANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ATAN');
  late final _TA_ATAN = _TA_ATANPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ATAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ATAN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ATANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ATAN');
  late final _TA_S_ATAN = _TA_S_ATANPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ATAN_Lookback() {
    return _TA_ATAN_Lookback();
  }

  late final _TA_ATAN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_ATAN_Lookback');
  late final _TA_ATAN_Lookback =
      _TA_ATAN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_ATR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ATR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ATRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ATR');
  late final _TA_ATR = _TA_ATRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ATR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ATR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ATRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ATR');
  late final _TA_S_ATR = _TA_S_ATRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ATR_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ATR_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ATR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_ATR_Lookback');
  late final _TA_ATR_Lookback =
      _TA_ATR_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_AVGPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_AVGPRICE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_AVGPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_AVGPRICE');
  late final _TA_AVGPRICE = _TA_AVGPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_AVGPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_AVGPRICE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_AVGPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_AVGPRICE');
  late final _TA_S_AVGPRICE = _TA_S_AVGPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_AVGPRICE_Lookback() {
    return _TA_AVGPRICE_Lookback();
  }

  late final _TA_AVGPRICE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_AVGPRICE_Lookback');
  late final _TA_AVGPRICE_Lookback =
      _TA_AVGPRICE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_AVGDEV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_AVGDEV(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_AVGDEVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_AVGDEV');
  late final _TA_AVGDEV = _TA_AVGDEVPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_AVGDEV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_AVGDEV(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_AVGDEVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_AVGDEV');
  late final _TA_S_AVGDEV = _TA_S_AVGDEVPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_AVGDEV_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_AVGDEV_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_AVGDEV_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_AVGDEV_Lookback');
  late final _TA_AVGDEV_Lookback =
      _TA_AVGDEV_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_BBANDS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    double optInNbDevUp,
    double optInNbDevDn,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outRealUpperBand,
    ffi.Pointer<ffi.Double> outRealMiddleBand,
    ffi.Pointer<ffi.Double> outRealLowerBand,
  ) {
    return TA_RetCode.fromValue(_TA_BBANDS(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDevUp,
      optInNbDevDn,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outRealUpperBand,
      outRealMiddleBand,
      outRealLowerBand,
    ));
  }

  late final _TA_BBANDSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_BBANDS');
  late final _TA_BBANDS = _TA_BBANDSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_BBANDS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    double optInNbDevUp,
    double optInNbDevDn,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outRealUpperBand,
    ffi.Pointer<ffi.Double> outRealMiddleBand,
    ffi.Pointer<ffi.Double> outRealLowerBand,
  ) {
    return TA_RetCode.fromValue(_TA_S_BBANDS(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDevUp,
      optInNbDevDn,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outRealUpperBand,
      outRealMiddleBand,
      outRealLowerBand,
    ));
  }

  late final _TA_S_BBANDSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_BBANDS');
  late final _TA_S_BBANDS = _TA_S_BBANDSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          double,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_BBANDS_Lookback(
    int optInTimePeriod,
    double optInNbDevUp,
    double optInNbDevDn,
    TA_MAType optInMAType,
  ) {
    return _TA_BBANDS_Lookback(
      optInTimePeriod,
      optInNbDevUp,
      optInNbDevDn,
      optInMAType.value,
    );
  }

  late final _TA_BBANDS_LookbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Double, ffi.Double,
              ffi.UnsignedInt)>>('TA_BBANDS_Lookback');
  late final _TA_BBANDS_Lookback = _TA_BBANDS_LookbackPtr.asFunction<
      int Function(int, double, double, int)>();

  TA_RetCode TA_BETA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_BETA(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_BETAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_BETA');
  late final _TA_BETA = _TA_BETAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_BETA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_BETA(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_BETAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_BETA');
  late final _TA_S_BETA = _TA_S_BETAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_BETA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_BETA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_BETA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_BETA_Lookback');
  late final _TA_BETA_Lookback =
      _TA_BETA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_BOP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_BOP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_BOPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_BOP');
  late final _TA_BOP = _TA_BOPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_BOP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_BOP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_BOPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_BOP');
  late final _TA_S_BOP = _TA_S_BOPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_BOP_Lookback() {
    return _TA_BOP_Lookback();
  }

  late final _TA_BOP_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_BOP_Lookback');
  late final _TA_BOP_Lookback =
      _TA_BOP_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CCI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_CCI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_CCIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_CCI');
  late final _TA_CCI = _TA_CCIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_CCI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_CCI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_CCIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_CCI');
  late final _TA_S_CCI = _TA_S_CCIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_CCI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_CCI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_CCI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_CCI_Lookback');
  late final _TA_CCI_Lookback =
      _TA_CCI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_CDL2CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL2CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL2CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL2CROWS');
  late final _TA_CDL2CROWS = _TA_CDL2CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL2CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL2CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL2CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL2CROWS');
  late final _TA_S_CDL2CROWS = _TA_S_CDL2CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL2CROWS_Lookback() {
    return _TA_CDL2CROWS_Lookback();
  }

  late final _TA_CDL2CROWS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDL2CROWS_Lookback');
  late final _TA_CDL2CROWS_Lookback =
      _TA_CDL2CROWS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3BLACKCROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3BLACKCROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3BLACKCROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3BLACKCROWS');
  late final _TA_CDL3BLACKCROWS = _TA_CDL3BLACKCROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3BLACKCROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3BLACKCROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3BLACKCROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3BLACKCROWS');
  late final _TA_S_CDL3BLACKCROWS = _TA_S_CDL3BLACKCROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3BLACKCROWS_Lookback() {
    return _TA_CDL3BLACKCROWS_Lookback();
  }

  late final _TA_CDL3BLACKCROWS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDL3BLACKCROWS_Lookback');
  late final _TA_CDL3BLACKCROWS_Lookback =
      _TA_CDL3BLACKCROWS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3INSIDE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3INSIDE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3INSIDEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3INSIDE');
  late final _TA_CDL3INSIDE = _TA_CDL3INSIDEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3INSIDE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3INSIDE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3INSIDEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3INSIDE');
  late final _TA_S_CDL3INSIDE = _TA_S_CDL3INSIDEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3INSIDE_Lookback() {
    return _TA_CDL3INSIDE_Lookback();
  }

  late final _TA_CDL3INSIDE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDL3INSIDE_Lookback');
  late final _TA_CDL3INSIDE_Lookback =
      _TA_CDL3INSIDE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3LINESTRIKE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3LINESTRIKE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3LINESTRIKEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3LINESTRIKE');
  late final _TA_CDL3LINESTRIKE = _TA_CDL3LINESTRIKEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3LINESTRIKE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3LINESTRIKE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3LINESTRIKEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3LINESTRIKE');
  late final _TA_S_CDL3LINESTRIKE = _TA_S_CDL3LINESTRIKEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3LINESTRIKE_Lookback() {
    return _TA_CDL3LINESTRIKE_Lookback();
  }

  late final _TA_CDL3LINESTRIKE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDL3LINESTRIKE_Lookback');
  late final _TA_CDL3LINESTRIKE_Lookback =
      _TA_CDL3LINESTRIKE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3OUTSIDE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3OUTSIDE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3OUTSIDEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3OUTSIDE');
  late final _TA_CDL3OUTSIDE = _TA_CDL3OUTSIDEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3OUTSIDE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3OUTSIDE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3OUTSIDEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3OUTSIDE');
  late final _TA_S_CDL3OUTSIDE = _TA_S_CDL3OUTSIDEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3OUTSIDE_Lookback() {
    return _TA_CDL3OUTSIDE_Lookback();
  }

  late final _TA_CDL3OUTSIDE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDL3OUTSIDE_Lookback');
  late final _TA_CDL3OUTSIDE_Lookback =
      _TA_CDL3OUTSIDE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3STARSINSOUTH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3STARSINSOUTH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3STARSINSOUTHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3STARSINSOUTH');
  late final _TA_CDL3STARSINSOUTH = _TA_CDL3STARSINSOUTHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3STARSINSOUTH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3STARSINSOUTH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3STARSINSOUTHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3STARSINSOUTH');
  late final _TA_S_CDL3STARSINSOUTH = _TA_S_CDL3STARSINSOUTHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3STARSINSOUTH_Lookback() {
    return _TA_CDL3STARSINSOUTH_Lookback();
  }

  late final _TA_CDL3STARSINSOUTH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDL3STARSINSOUTH_Lookback');
  late final _TA_CDL3STARSINSOUTH_Lookback =
      _TA_CDL3STARSINSOUTH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDL3WHITESOLDIERS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDL3WHITESOLDIERS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDL3WHITESOLDIERSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDL3WHITESOLDIERS');
  late final _TA_CDL3WHITESOLDIERS = _TA_CDL3WHITESOLDIERSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDL3WHITESOLDIERS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDL3WHITESOLDIERS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDL3WHITESOLDIERSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDL3WHITESOLDIERS');
  late final _TA_S_CDL3WHITESOLDIERS = _TA_S_CDL3WHITESOLDIERSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDL3WHITESOLDIERS_Lookback() {
    return _TA_CDL3WHITESOLDIERS_Lookback();
  }

  late final _TA_CDL3WHITESOLDIERS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDL3WHITESOLDIERS_Lookback');
  late final _TA_CDL3WHITESOLDIERS_Lookback =
      _TA_CDL3WHITESOLDIERS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLABANDONEDBABY(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLABANDONEDBABY(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLABANDONEDBABYPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLABANDONEDBABY');
  late final _TA_CDLABANDONEDBABY = _TA_CDLABANDONEDBABYPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLABANDONEDBABY(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLABANDONEDBABY(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLABANDONEDBABYPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLABANDONEDBABY');
  late final _TA_S_CDLABANDONEDBABY = _TA_S_CDLABANDONEDBABYPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLABANDONEDBABY_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLABANDONEDBABY_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLABANDONEDBABY_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLABANDONEDBABY_Lookback');
  late final _TA_CDLABANDONEDBABY_Lookback =
      _TA_CDLABANDONEDBABY_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLADVANCEBLOCK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLADVANCEBLOCK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLADVANCEBLOCKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLADVANCEBLOCK');
  late final _TA_CDLADVANCEBLOCK = _TA_CDLADVANCEBLOCKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLADVANCEBLOCK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLADVANCEBLOCK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLADVANCEBLOCKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLADVANCEBLOCK');
  late final _TA_S_CDLADVANCEBLOCK = _TA_S_CDLADVANCEBLOCKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLADVANCEBLOCK_Lookback() {
    return _TA_CDLADVANCEBLOCK_Lookback();
  }

  late final _TA_CDLADVANCEBLOCK_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLADVANCEBLOCK_Lookback');
  late final _TA_CDLADVANCEBLOCK_Lookback =
      _TA_CDLADVANCEBLOCK_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLBELTHOLD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLBELTHOLD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLBELTHOLDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLBELTHOLD');
  late final _TA_CDLBELTHOLD = _TA_CDLBELTHOLDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLBELTHOLD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLBELTHOLD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLBELTHOLDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLBELTHOLD');
  late final _TA_S_CDLBELTHOLD = _TA_S_CDLBELTHOLDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLBELTHOLD_Lookback() {
    return _TA_CDLBELTHOLD_Lookback();
  }

  late final _TA_CDLBELTHOLD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLBELTHOLD_Lookback');
  late final _TA_CDLBELTHOLD_Lookback =
      _TA_CDLBELTHOLD_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLBREAKAWAY(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLBREAKAWAY(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLBREAKAWAYPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLBREAKAWAY');
  late final _TA_CDLBREAKAWAY = _TA_CDLBREAKAWAYPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLBREAKAWAY(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLBREAKAWAY(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLBREAKAWAYPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLBREAKAWAY');
  late final _TA_S_CDLBREAKAWAY = _TA_S_CDLBREAKAWAYPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLBREAKAWAY_Lookback() {
    return _TA_CDLBREAKAWAY_Lookback();
  }

  late final _TA_CDLBREAKAWAY_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLBREAKAWAY_Lookback');
  late final _TA_CDLBREAKAWAY_Lookback =
      _TA_CDLBREAKAWAY_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLCLOSINGMARUBOZU(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLCLOSINGMARUBOZU(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLCLOSINGMARUBOZUPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLCLOSINGMARUBOZU');
  late final _TA_CDLCLOSINGMARUBOZU = _TA_CDLCLOSINGMARUBOZUPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLCLOSINGMARUBOZU(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLCLOSINGMARUBOZU(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLCLOSINGMARUBOZUPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLCLOSINGMARUBOZU');
  late final _TA_S_CDLCLOSINGMARUBOZU = _TA_S_CDLCLOSINGMARUBOZUPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLCLOSINGMARUBOZU_Lookback() {
    return _TA_CDLCLOSINGMARUBOZU_Lookback();
  }

  late final _TA_CDLCLOSINGMARUBOZU_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLCLOSINGMARUBOZU_Lookback');
  late final _TA_CDLCLOSINGMARUBOZU_Lookback =
      _TA_CDLCLOSINGMARUBOZU_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLCONCEALBABYSWALL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLCONCEALBABYSWALL(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLCONCEALBABYSWALLPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLCONCEALBABYSWALL');
  late final _TA_CDLCONCEALBABYSWALL = _TA_CDLCONCEALBABYSWALLPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLCONCEALBABYSWALL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLCONCEALBABYSWALL(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLCONCEALBABYSWALLPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLCONCEALBABYSWALL');
  late final _TA_S_CDLCONCEALBABYSWALL =
      _TA_S_CDLCONCEALBABYSWALLPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TA_CDLCONCEALBABYSWALL_Lookback() {
    return _TA_CDLCONCEALBABYSWALL_Lookback();
  }

  late final _TA_CDLCONCEALBABYSWALL_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLCONCEALBABYSWALL_Lookback');
  late final _TA_CDLCONCEALBABYSWALL_Lookback =
      _TA_CDLCONCEALBABYSWALL_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLCOUNTERATTACK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLCOUNTERATTACK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLCOUNTERATTACKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLCOUNTERATTACK');
  late final _TA_CDLCOUNTERATTACK = _TA_CDLCOUNTERATTACKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLCOUNTERATTACK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLCOUNTERATTACK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLCOUNTERATTACKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLCOUNTERATTACK');
  late final _TA_S_CDLCOUNTERATTACK = _TA_S_CDLCOUNTERATTACKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLCOUNTERATTACK_Lookback() {
    return _TA_CDLCOUNTERATTACK_Lookback();
  }

  late final _TA_CDLCOUNTERATTACK_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLCOUNTERATTACK_Lookback');
  late final _TA_CDLCOUNTERATTACK_Lookback =
      _TA_CDLCOUNTERATTACK_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLDARKCLOUDCOVER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLDARKCLOUDCOVER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLDARKCLOUDCOVERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLDARKCLOUDCOVER');
  late final _TA_CDLDARKCLOUDCOVER = _TA_CDLDARKCLOUDCOVERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLDARKCLOUDCOVER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLDARKCLOUDCOVER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLDARKCLOUDCOVERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLDARKCLOUDCOVER');
  late final _TA_S_CDLDARKCLOUDCOVER = _TA_S_CDLDARKCLOUDCOVERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLDARKCLOUDCOVER_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLDARKCLOUDCOVER_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLDARKCLOUDCOVER_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLDARKCLOUDCOVER_Lookback');
  late final _TA_CDLDARKCLOUDCOVER_Lookback =
      _TA_CDLDARKCLOUDCOVER_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLDOJI');
  late final _TA_CDLDOJI = _TA_CDLDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLDOJI');
  late final _TA_S_CDLDOJI = _TA_S_CDLDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLDOJI_Lookback() {
    return _TA_CDLDOJI_Lookback();
  }

  late final _TA_CDLDOJI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLDOJI_Lookback');
  late final _TA_CDLDOJI_Lookback =
      _TA_CDLDOJI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLDOJISTAR');
  late final _TA_CDLDOJISTAR = _TA_CDLDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLDOJISTAR');
  late final _TA_S_CDLDOJISTAR = _TA_S_CDLDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLDOJISTAR_Lookback() {
    return _TA_CDLDOJISTAR_Lookback();
  }

  late final _TA_CDLDOJISTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLDOJISTAR_Lookback');
  late final _TA_CDLDOJISTAR_Lookback =
      _TA_CDLDOJISTAR_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLDRAGONFLYDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLDRAGONFLYDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLDRAGONFLYDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLDRAGONFLYDOJI');
  late final _TA_CDLDRAGONFLYDOJI = _TA_CDLDRAGONFLYDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLDRAGONFLYDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLDRAGONFLYDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLDRAGONFLYDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLDRAGONFLYDOJI');
  late final _TA_S_CDLDRAGONFLYDOJI = _TA_S_CDLDRAGONFLYDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLDRAGONFLYDOJI_Lookback() {
    return _TA_CDLDRAGONFLYDOJI_Lookback();
  }

  late final _TA_CDLDRAGONFLYDOJI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLDRAGONFLYDOJI_Lookback');
  late final _TA_CDLDRAGONFLYDOJI_Lookback =
      _TA_CDLDRAGONFLYDOJI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLENGULFING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLENGULFING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLENGULFINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLENGULFING');
  late final _TA_CDLENGULFING = _TA_CDLENGULFINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLENGULFING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLENGULFING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLENGULFINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLENGULFING');
  late final _TA_S_CDLENGULFING = _TA_S_CDLENGULFINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLENGULFING_Lookback() {
    return _TA_CDLENGULFING_Lookback();
  }

  late final _TA_CDLENGULFING_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLENGULFING_Lookback');
  late final _TA_CDLENGULFING_Lookback =
      _TA_CDLENGULFING_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLEVENINGDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLEVENINGDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLEVENINGDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLEVENINGDOJISTAR');
  late final _TA_CDLEVENINGDOJISTAR = _TA_CDLEVENINGDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLEVENINGDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLEVENINGDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLEVENINGDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLEVENINGDOJISTAR');
  late final _TA_S_CDLEVENINGDOJISTAR = _TA_S_CDLEVENINGDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLEVENINGDOJISTAR_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLEVENINGDOJISTAR_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLEVENINGDOJISTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLEVENINGDOJISTAR_Lookback');
  late final _TA_CDLEVENINGDOJISTAR_Lookback =
      _TA_CDLEVENINGDOJISTAR_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLEVENINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLEVENINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLEVENINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLEVENINGSTAR');
  late final _TA_CDLEVENINGSTAR = _TA_CDLEVENINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLEVENINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLEVENINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLEVENINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLEVENINGSTAR');
  late final _TA_S_CDLEVENINGSTAR = _TA_S_CDLEVENINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLEVENINGSTAR_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLEVENINGSTAR_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLEVENINGSTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLEVENINGSTAR_Lookback');
  late final _TA_CDLEVENINGSTAR_Lookback =
      _TA_CDLEVENINGSTAR_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLGAPSIDESIDEWHITE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLGAPSIDESIDEWHITE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLGAPSIDESIDEWHITEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLGAPSIDESIDEWHITE');
  late final _TA_CDLGAPSIDESIDEWHITE = _TA_CDLGAPSIDESIDEWHITEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLGAPSIDESIDEWHITE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLGAPSIDESIDEWHITE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLGAPSIDESIDEWHITEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLGAPSIDESIDEWHITE');
  late final _TA_S_CDLGAPSIDESIDEWHITE =
      _TA_S_CDLGAPSIDESIDEWHITEPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TA_CDLGAPSIDESIDEWHITE_Lookback() {
    return _TA_CDLGAPSIDESIDEWHITE_Lookback();
  }

  late final _TA_CDLGAPSIDESIDEWHITE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLGAPSIDESIDEWHITE_Lookback');
  late final _TA_CDLGAPSIDESIDEWHITE_Lookback =
      _TA_CDLGAPSIDESIDEWHITE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLGRAVESTONEDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLGRAVESTONEDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLGRAVESTONEDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLGRAVESTONEDOJI');
  late final _TA_CDLGRAVESTONEDOJI = _TA_CDLGRAVESTONEDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLGRAVESTONEDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLGRAVESTONEDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLGRAVESTONEDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLGRAVESTONEDOJI');
  late final _TA_S_CDLGRAVESTONEDOJI = _TA_S_CDLGRAVESTONEDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLGRAVESTONEDOJI_Lookback() {
    return _TA_CDLGRAVESTONEDOJI_Lookback();
  }

  late final _TA_CDLGRAVESTONEDOJI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLGRAVESTONEDOJI_Lookback');
  late final _TA_CDLGRAVESTONEDOJI_Lookback =
      _TA_CDLGRAVESTONEDOJI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHAMMER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHAMMER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHAMMERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHAMMER');
  late final _TA_CDLHAMMER = _TA_CDLHAMMERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHAMMER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHAMMER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHAMMERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHAMMER');
  late final _TA_S_CDLHAMMER = _TA_S_CDLHAMMERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHAMMER_Lookback() {
    return _TA_CDLHAMMER_Lookback();
  }

  late final _TA_CDLHAMMER_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLHAMMER_Lookback');
  late final _TA_CDLHAMMER_Lookback =
      _TA_CDLHAMMER_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHANGINGMAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHANGINGMAN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHANGINGMANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHANGINGMAN');
  late final _TA_CDLHANGINGMAN = _TA_CDLHANGINGMANPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHANGINGMAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHANGINGMAN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHANGINGMANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHANGINGMAN');
  late final _TA_S_CDLHANGINGMAN = _TA_S_CDLHANGINGMANPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHANGINGMAN_Lookback() {
    return _TA_CDLHANGINGMAN_Lookback();
  }

  late final _TA_CDLHANGINGMAN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLHANGINGMAN_Lookback');
  late final _TA_CDLHANGINGMAN_Lookback =
      _TA_CDLHANGINGMAN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHARAMI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHARAMI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHARAMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHARAMI');
  late final _TA_CDLHARAMI = _TA_CDLHARAMIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHARAMI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHARAMI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHARAMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHARAMI');
  late final _TA_S_CDLHARAMI = _TA_S_CDLHARAMIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHARAMI_Lookback() {
    return _TA_CDLHARAMI_Lookback();
  }

  late final _TA_CDLHARAMI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLHARAMI_Lookback');
  late final _TA_CDLHARAMI_Lookback =
      _TA_CDLHARAMI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHARAMICROSS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHARAMICROSS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHARAMICROSSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHARAMICROSS');
  late final _TA_CDLHARAMICROSS = _TA_CDLHARAMICROSSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHARAMICROSS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHARAMICROSS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHARAMICROSSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHARAMICROSS');
  late final _TA_S_CDLHARAMICROSS = _TA_S_CDLHARAMICROSSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHARAMICROSS_Lookback() {
    return _TA_CDLHARAMICROSS_Lookback();
  }

  late final _TA_CDLHARAMICROSS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLHARAMICROSS_Lookback');
  late final _TA_CDLHARAMICROSS_Lookback =
      _TA_CDLHARAMICROSS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHIGHWAVE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHIGHWAVE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHIGHWAVEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHIGHWAVE');
  late final _TA_CDLHIGHWAVE = _TA_CDLHIGHWAVEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHIGHWAVE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHIGHWAVE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHIGHWAVEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHIGHWAVE');
  late final _TA_S_CDLHIGHWAVE = _TA_S_CDLHIGHWAVEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHIGHWAVE_Lookback() {
    return _TA_CDLHIGHWAVE_Lookback();
  }

  late final _TA_CDLHIGHWAVE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLHIGHWAVE_Lookback');
  late final _TA_CDLHIGHWAVE_Lookback =
      _TA_CDLHIGHWAVE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHIKKAKE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHIKKAKE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHIKKAKEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHIKKAKE');
  late final _TA_CDLHIKKAKE = _TA_CDLHIKKAKEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHIKKAKE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHIKKAKE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHIKKAKEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHIKKAKE');
  late final _TA_S_CDLHIKKAKE = _TA_S_CDLHIKKAKEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHIKKAKE_Lookback() {
    return _TA_CDLHIKKAKE_Lookback();
  }

  late final _TA_CDLHIKKAKE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLHIKKAKE_Lookback');
  late final _TA_CDLHIKKAKE_Lookback =
      _TA_CDLHIKKAKE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHIKKAKEMOD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHIKKAKEMOD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHIKKAKEMODPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHIKKAKEMOD');
  late final _TA_CDLHIKKAKEMOD = _TA_CDLHIKKAKEMODPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHIKKAKEMOD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHIKKAKEMOD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHIKKAKEMODPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHIKKAKEMOD');
  late final _TA_S_CDLHIKKAKEMOD = _TA_S_CDLHIKKAKEMODPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHIKKAKEMOD_Lookback() {
    return _TA_CDLHIKKAKEMOD_Lookback();
  }

  late final _TA_CDLHIKKAKEMOD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLHIKKAKEMOD_Lookback');
  late final _TA_CDLHIKKAKEMOD_Lookback =
      _TA_CDLHIKKAKEMOD_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLHOMINGPIGEON(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLHOMINGPIGEON(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLHOMINGPIGEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLHOMINGPIGEON');
  late final _TA_CDLHOMINGPIGEON = _TA_CDLHOMINGPIGEONPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLHOMINGPIGEON(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLHOMINGPIGEON(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLHOMINGPIGEONPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLHOMINGPIGEON');
  late final _TA_S_CDLHOMINGPIGEON = _TA_S_CDLHOMINGPIGEONPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLHOMINGPIGEON_Lookback() {
    return _TA_CDLHOMINGPIGEON_Lookback();
  }

  late final _TA_CDLHOMINGPIGEON_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLHOMINGPIGEON_Lookback');
  late final _TA_CDLHOMINGPIGEON_Lookback =
      _TA_CDLHOMINGPIGEON_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLIDENTICAL3CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLIDENTICAL3CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLIDENTICAL3CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLIDENTICAL3CROWS');
  late final _TA_CDLIDENTICAL3CROWS = _TA_CDLIDENTICAL3CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLIDENTICAL3CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLIDENTICAL3CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLIDENTICAL3CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLIDENTICAL3CROWS');
  late final _TA_S_CDLIDENTICAL3CROWS = _TA_S_CDLIDENTICAL3CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLIDENTICAL3CROWS_Lookback() {
    return _TA_CDLIDENTICAL3CROWS_Lookback();
  }

  late final _TA_CDLIDENTICAL3CROWS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLIDENTICAL3CROWS_Lookback');
  late final _TA_CDLIDENTICAL3CROWS_Lookback =
      _TA_CDLIDENTICAL3CROWS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLINNECK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLINNECK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLINNECKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLINNECK');
  late final _TA_CDLINNECK = _TA_CDLINNECKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLINNECK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLINNECK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLINNECKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLINNECK');
  late final _TA_S_CDLINNECK = _TA_S_CDLINNECKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLINNECK_Lookback() {
    return _TA_CDLINNECK_Lookback();
  }

  late final _TA_CDLINNECK_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLINNECK_Lookback');
  late final _TA_CDLINNECK_Lookback =
      _TA_CDLINNECK_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLINVERTEDHAMMER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLINVERTEDHAMMER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLINVERTEDHAMMERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLINVERTEDHAMMER');
  late final _TA_CDLINVERTEDHAMMER = _TA_CDLINVERTEDHAMMERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLINVERTEDHAMMER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLINVERTEDHAMMER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLINVERTEDHAMMERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLINVERTEDHAMMER');
  late final _TA_S_CDLINVERTEDHAMMER = _TA_S_CDLINVERTEDHAMMERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLINVERTEDHAMMER_Lookback() {
    return _TA_CDLINVERTEDHAMMER_Lookback();
  }

  late final _TA_CDLINVERTEDHAMMER_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLINVERTEDHAMMER_Lookback');
  late final _TA_CDLINVERTEDHAMMER_Lookback =
      _TA_CDLINVERTEDHAMMER_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLKICKING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLKICKING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLKICKINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLKICKING');
  late final _TA_CDLKICKING = _TA_CDLKICKINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLKICKING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLKICKING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLKICKINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLKICKING');
  late final _TA_S_CDLKICKING = _TA_S_CDLKICKINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLKICKING_Lookback() {
    return _TA_CDLKICKING_Lookback();
  }

  late final _TA_CDLKICKING_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLKICKING_Lookback');
  late final _TA_CDLKICKING_Lookback =
      _TA_CDLKICKING_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLKICKINGBYLENGTH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLKICKINGBYLENGTH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLKICKINGBYLENGTHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLKICKINGBYLENGTH');
  late final _TA_CDLKICKINGBYLENGTH = _TA_CDLKICKINGBYLENGTHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLKICKINGBYLENGTH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLKICKINGBYLENGTH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLKICKINGBYLENGTHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLKICKINGBYLENGTH');
  late final _TA_S_CDLKICKINGBYLENGTH = _TA_S_CDLKICKINGBYLENGTHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLKICKINGBYLENGTH_Lookback() {
    return _TA_CDLKICKINGBYLENGTH_Lookback();
  }

  late final _TA_CDLKICKINGBYLENGTH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLKICKINGBYLENGTH_Lookback');
  late final _TA_CDLKICKINGBYLENGTH_Lookback =
      _TA_CDLKICKINGBYLENGTH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLLADDERBOTTOM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLLADDERBOTTOM(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLLADDERBOTTOMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLLADDERBOTTOM');
  late final _TA_CDLLADDERBOTTOM = _TA_CDLLADDERBOTTOMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLLADDERBOTTOM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLLADDERBOTTOM(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLLADDERBOTTOMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLLADDERBOTTOM');
  late final _TA_S_CDLLADDERBOTTOM = _TA_S_CDLLADDERBOTTOMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLLADDERBOTTOM_Lookback() {
    return _TA_CDLLADDERBOTTOM_Lookback();
  }

  late final _TA_CDLLADDERBOTTOM_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLLADDERBOTTOM_Lookback');
  late final _TA_CDLLADDERBOTTOM_Lookback =
      _TA_CDLLADDERBOTTOM_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLLONGLEGGEDDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLLONGLEGGEDDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLLONGLEGGEDDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLLONGLEGGEDDOJI');
  late final _TA_CDLLONGLEGGEDDOJI = _TA_CDLLONGLEGGEDDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLLONGLEGGEDDOJI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLLONGLEGGEDDOJI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLLONGLEGGEDDOJIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLLONGLEGGEDDOJI');
  late final _TA_S_CDLLONGLEGGEDDOJI = _TA_S_CDLLONGLEGGEDDOJIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLLONGLEGGEDDOJI_Lookback() {
    return _TA_CDLLONGLEGGEDDOJI_Lookback();
  }

  late final _TA_CDLLONGLEGGEDDOJI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLLONGLEGGEDDOJI_Lookback');
  late final _TA_CDLLONGLEGGEDDOJI_Lookback =
      _TA_CDLLONGLEGGEDDOJI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLLONGLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLLONGLINE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLLONGLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLLONGLINE');
  late final _TA_CDLLONGLINE = _TA_CDLLONGLINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLLONGLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLLONGLINE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLLONGLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLLONGLINE');
  late final _TA_S_CDLLONGLINE = _TA_S_CDLLONGLINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLLONGLINE_Lookback() {
    return _TA_CDLLONGLINE_Lookback();
  }

  late final _TA_CDLLONGLINE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLLONGLINE_Lookback');
  late final _TA_CDLLONGLINE_Lookback =
      _TA_CDLLONGLINE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLMARUBOZU(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLMARUBOZU(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLMARUBOZUPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLMARUBOZU');
  late final _TA_CDLMARUBOZU = _TA_CDLMARUBOZUPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLMARUBOZU(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLMARUBOZU(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLMARUBOZUPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLMARUBOZU');
  late final _TA_S_CDLMARUBOZU = _TA_S_CDLMARUBOZUPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLMARUBOZU_Lookback() {
    return _TA_CDLMARUBOZU_Lookback();
  }

  late final _TA_CDLMARUBOZU_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLMARUBOZU_Lookback');
  late final _TA_CDLMARUBOZU_Lookback =
      _TA_CDLMARUBOZU_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLMATCHINGLOW(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLMATCHINGLOW(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLMATCHINGLOWPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLMATCHINGLOW');
  late final _TA_CDLMATCHINGLOW = _TA_CDLMATCHINGLOWPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLMATCHINGLOW(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLMATCHINGLOW(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLMATCHINGLOWPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLMATCHINGLOW');
  late final _TA_S_CDLMATCHINGLOW = _TA_S_CDLMATCHINGLOWPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLMATCHINGLOW_Lookback() {
    return _TA_CDLMATCHINGLOW_Lookback();
  }

  late final _TA_CDLMATCHINGLOW_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLMATCHINGLOW_Lookback');
  late final _TA_CDLMATCHINGLOW_Lookback =
      _TA_CDLMATCHINGLOW_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLMATHOLD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLMATHOLD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLMATHOLDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLMATHOLD');
  late final _TA_CDLMATHOLD = _TA_CDLMATHOLDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLMATHOLD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLMATHOLD(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLMATHOLDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLMATHOLD');
  late final _TA_S_CDLMATHOLD = _TA_S_CDLMATHOLDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLMATHOLD_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLMATHOLD_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLMATHOLD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLMATHOLD_Lookback');
  late final _TA_CDLMATHOLD_Lookback =
      _TA_CDLMATHOLD_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLMORNINGDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLMORNINGDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLMORNINGDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLMORNINGDOJISTAR');
  late final _TA_CDLMORNINGDOJISTAR = _TA_CDLMORNINGDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLMORNINGDOJISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLMORNINGDOJISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLMORNINGDOJISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLMORNINGDOJISTAR');
  late final _TA_S_CDLMORNINGDOJISTAR = _TA_S_CDLMORNINGDOJISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLMORNINGDOJISTAR_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLMORNINGDOJISTAR_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLMORNINGDOJISTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLMORNINGDOJISTAR_Lookback');
  late final _TA_CDLMORNINGDOJISTAR_Lookback =
      _TA_CDLMORNINGDOJISTAR_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLMORNINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLMORNINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLMORNINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLMORNINGSTAR');
  late final _TA_CDLMORNINGSTAR = _TA_CDLMORNINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLMORNINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    double optInPenetration,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLMORNINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      optInPenetration,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLMORNINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLMORNINGSTAR');
  late final _TA_S_CDLMORNINGSTAR = _TA_S_CDLMORNINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLMORNINGSTAR_Lookback(
    double optInPenetration,
  ) {
    return _TA_CDLMORNINGSTAR_Lookback(
      optInPenetration,
    );
  }

  late final _TA_CDLMORNINGSTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'TA_CDLMORNINGSTAR_Lookback');
  late final _TA_CDLMORNINGSTAR_Lookback =
      _TA_CDLMORNINGSTAR_LookbackPtr.asFunction<int Function(double)>();

  TA_RetCode TA_CDLONNECK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLONNECK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLONNECKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLONNECK');
  late final _TA_CDLONNECK = _TA_CDLONNECKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLONNECK(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLONNECK(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLONNECKPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLONNECK');
  late final _TA_S_CDLONNECK = _TA_S_CDLONNECKPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLONNECK_Lookback() {
    return _TA_CDLONNECK_Lookback();
  }

  late final _TA_CDLONNECK_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLONNECK_Lookback');
  late final _TA_CDLONNECK_Lookback =
      _TA_CDLONNECK_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLPIERCING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLPIERCING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLPIERCINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLPIERCING');
  late final _TA_CDLPIERCING = _TA_CDLPIERCINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLPIERCING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLPIERCING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLPIERCINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLPIERCING');
  late final _TA_S_CDLPIERCING = _TA_S_CDLPIERCINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLPIERCING_Lookback() {
    return _TA_CDLPIERCING_Lookback();
  }

  late final _TA_CDLPIERCING_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLPIERCING_Lookback');
  late final _TA_CDLPIERCING_Lookback =
      _TA_CDLPIERCING_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLRICKSHAWMAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLRICKSHAWMAN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLRICKSHAWMANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLRICKSHAWMAN');
  late final _TA_CDLRICKSHAWMAN = _TA_CDLRICKSHAWMANPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLRICKSHAWMAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLRICKSHAWMAN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLRICKSHAWMANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLRICKSHAWMAN');
  late final _TA_S_CDLRICKSHAWMAN = _TA_S_CDLRICKSHAWMANPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLRICKSHAWMAN_Lookback() {
    return _TA_CDLRICKSHAWMAN_Lookback();
  }

  late final _TA_CDLRICKSHAWMAN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLRICKSHAWMAN_Lookback');
  late final _TA_CDLRICKSHAWMAN_Lookback =
      _TA_CDLRICKSHAWMAN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLRISEFALL3METHODS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLRISEFALL3METHODS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLRISEFALL3METHODSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLRISEFALL3METHODS');
  late final _TA_CDLRISEFALL3METHODS = _TA_CDLRISEFALL3METHODSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLRISEFALL3METHODS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLRISEFALL3METHODS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLRISEFALL3METHODSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLRISEFALL3METHODS');
  late final _TA_S_CDLRISEFALL3METHODS =
      _TA_S_CDLRISEFALL3METHODSPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TA_CDLRISEFALL3METHODS_Lookback() {
    return _TA_CDLRISEFALL3METHODS_Lookback();
  }

  late final _TA_CDLRISEFALL3METHODS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLRISEFALL3METHODS_Lookback');
  late final _TA_CDLRISEFALL3METHODS_Lookback =
      _TA_CDLRISEFALL3METHODS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSEPARATINGLINES(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSEPARATINGLINES(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSEPARATINGLINESPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSEPARATINGLINES');
  late final _TA_CDLSEPARATINGLINES = _TA_CDLSEPARATINGLINESPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSEPARATINGLINES(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSEPARATINGLINES(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSEPARATINGLINESPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSEPARATINGLINES');
  late final _TA_S_CDLSEPARATINGLINES = _TA_S_CDLSEPARATINGLINESPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSEPARATINGLINES_Lookback() {
    return _TA_CDLSEPARATINGLINES_Lookback();
  }

  late final _TA_CDLSEPARATINGLINES_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSEPARATINGLINES_Lookback');
  late final _TA_CDLSEPARATINGLINES_Lookback =
      _TA_CDLSEPARATINGLINES_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSHOOTINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSHOOTINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSHOOTINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSHOOTINGSTAR');
  late final _TA_CDLSHOOTINGSTAR = _TA_CDLSHOOTINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSHOOTINGSTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSHOOTINGSTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSHOOTINGSTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSHOOTINGSTAR');
  late final _TA_S_CDLSHOOTINGSTAR = _TA_S_CDLSHOOTINGSTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSHOOTINGSTAR_Lookback() {
    return _TA_CDLSHOOTINGSTAR_Lookback();
  }

  late final _TA_CDLSHOOTINGSTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSHOOTINGSTAR_Lookback');
  late final _TA_CDLSHOOTINGSTAR_Lookback =
      _TA_CDLSHOOTINGSTAR_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSHORTLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSHORTLINE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSHORTLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSHORTLINE');
  late final _TA_CDLSHORTLINE = _TA_CDLSHORTLINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSHORTLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSHORTLINE(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSHORTLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSHORTLINE');
  late final _TA_S_CDLSHORTLINE = _TA_S_CDLSHORTLINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSHORTLINE_Lookback() {
    return _TA_CDLSHORTLINE_Lookback();
  }

  late final _TA_CDLSHORTLINE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSHORTLINE_Lookback');
  late final _TA_CDLSHORTLINE_Lookback =
      _TA_CDLSHORTLINE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSPINNINGTOP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSPINNINGTOP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSPINNINGTOPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSPINNINGTOP');
  late final _TA_CDLSPINNINGTOP = _TA_CDLSPINNINGTOPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSPINNINGTOP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSPINNINGTOP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSPINNINGTOPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSPINNINGTOP');
  late final _TA_S_CDLSPINNINGTOP = _TA_S_CDLSPINNINGTOPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSPINNINGTOP_Lookback() {
    return _TA_CDLSPINNINGTOP_Lookback();
  }

  late final _TA_CDLSPINNINGTOP_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSPINNINGTOP_Lookback');
  late final _TA_CDLSPINNINGTOP_Lookback =
      _TA_CDLSPINNINGTOP_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSTALLEDPATTERN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSTALLEDPATTERN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSTALLEDPATTERNPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSTALLEDPATTERN');
  late final _TA_CDLSTALLEDPATTERN = _TA_CDLSTALLEDPATTERNPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSTALLEDPATTERN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSTALLEDPATTERN(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSTALLEDPATTERNPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSTALLEDPATTERN');
  late final _TA_S_CDLSTALLEDPATTERN = _TA_S_CDLSTALLEDPATTERNPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSTALLEDPATTERN_Lookback() {
    return _TA_CDLSTALLEDPATTERN_Lookback();
  }

  late final _TA_CDLSTALLEDPATTERN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSTALLEDPATTERN_Lookback');
  late final _TA_CDLSTALLEDPATTERN_Lookback =
      _TA_CDLSTALLEDPATTERN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLSTICKSANDWICH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLSTICKSANDWICH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLSTICKSANDWICHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLSTICKSANDWICH');
  late final _TA_CDLSTICKSANDWICH = _TA_CDLSTICKSANDWICHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLSTICKSANDWICH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLSTICKSANDWICH(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLSTICKSANDWICHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLSTICKSANDWICH');
  late final _TA_S_CDLSTICKSANDWICH = _TA_S_CDLSTICKSANDWICHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLSTICKSANDWICH_Lookback() {
    return _TA_CDLSTICKSANDWICH_Lookback();
  }

  late final _TA_CDLSTICKSANDWICH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLSTICKSANDWICH_Lookback');
  late final _TA_CDLSTICKSANDWICH_Lookback =
      _TA_CDLSTICKSANDWICH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLTAKURI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLTAKURI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLTAKURIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLTAKURI');
  late final _TA_CDLTAKURI = _TA_CDLTAKURIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLTAKURI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLTAKURI(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLTAKURIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLTAKURI');
  late final _TA_S_CDLTAKURI = _TA_S_CDLTAKURIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLTAKURI_Lookback() {
    return _TA_CDLTAKURI_Lookback();
  }

  late final _TA_CDLTAKURI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLTAKURI_Lookback');
  late final _TA_CDLTAKURI_Lookback =
      _TA_CDLTAKURI_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLTASUKIGAP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLTASUKIGAP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLTASUKIGAPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLTASUKIGAP');
  late final _TA_CDLTASUKIGAP = _TA_CDLTASUKIGAPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLTASUKIGAP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLTASUKIGAP(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLTASUKIGAPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLTASUKIGAP');
  late final _TA_S_CDLTASUKIGAP = _TA_S_CDLTASUKIGAPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLTASUKIGAP_Lookback() {
    return _TA_CDLTASUKIGAP_Lookback();
  }

  late final _TA_CDLTASUKIGAP_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLTASUKIGAP_Lookback');
  late final _TA_CDLTASUKIGAP_Lookback =
      _TA_CDLTASUKIGAP_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLTHRUSTING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLTHRUSTING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLTHRUSTINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLTHRUSTING');
  late final _TA_CDLTHRUSTING = _TA_CDLTHRUSTINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLTHRUSTING(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLTHRUSTING(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLTHRUSTINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLTHRUSTING');
  late final _TA_S_CDLTHRUSTING = _TA_S_CDLTHRUSTINGPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLTHRUSTING_Lookback() {
    return _TA_CDLTHRUSTING_Lookback();
  }

  late final _TA_CDLTHRUSTING_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLTHRUSTING_Lookback');
  late final _TA_CDLTHRUSTING_Lookback =
      _TA_CDLTHRUSTING_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLTRISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLTRISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLTRISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLTRISTAR');
  late final _TA_CDLTRISTAR = _TA_CDLTRISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLTRISTAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLTRISTAR(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLTRISTARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLTRISTAR');
  late final _TA_S_CDLTRISTAR = _TA_S_CDLTRISTARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLTRISTAR_Lookback() {
    return _TA_CDLTRISTAR_Lookback();
  }

  late final _TA_CDLTRISTAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CDLTRISTAR_Lookback');
  late final _TA_CDLTRISTAR_Lookback =
      _TA_CDLTRISTAR_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLUNIQUE3RIVER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLUNIQUE3RIVER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLUNIQUE3RIVERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLUNIQUE3RIVER');
  late final _TA_CDLUNIQUE3RIVER = _TA_CDLUNIQUE3RIVERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLUNIQUE3RIVER(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLUNIQUE3RIVER(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLUNIQUE3RIVERPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLUNIQUE3RIVER');
  late final _TA_S_CDLUNIQUE3RIVER = _TA_S_CDLUNIQUE3RIVERPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLUNIQUE3RIVER_Lookback() {
    return _TA_CDLUNIQUE3RIVER_Lookback();
  }

  late final _TA_CDLUNIQUE3RIVER_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLUNIQUE3RIVER_Lookback');
  late final _TA_CDLUNIQUE3RIVER_Lookback =
      _TA_CDLUNIQUE3RIVER_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLUPSIDEGAP2CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLUPSIDEGAP2CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLUPSIDEGAP2CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLUPSIDEGAP2CROWS');
  late final _TA_CDLUPSIDEGAP2CROWS = _TA_CDLUPSIDEGAP2CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLUPSIDEGAP2CROWS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLUPSIDEGAP2CROWS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLUPSIDEGAP2CROWSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLUPSIDEGAP2CROWS');
  late final _TA_S_CDLUPSIDEGAP2CROWS = _TA_S_CDLUPSIDEGAP2CROWSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int TA_CDLUPSIDEGAP2CROWS_Lookback() {
    return _TA_CDLUPSIDEGAP2CROWS_Lookback();
  }

  late final _TA_CDLUPSIDEGAP2CROWS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLUPSIDEGAP2CROWS_Lookback');
  late final _TA_CDLUPSIDEGAP2CROWS_Lookback =
      _TA_CDLUPSIDEGAP2CROWS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CDLXSIDEGAP3METHODS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_CDLXSIDEGAP3METHODS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_CDLXSIDEGAP3METHODSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_CDLXSIDEGAP3METHODS');
  late final _TA_CDLXSIDEGAP3METHODS = _TA_CDLXSIDEGAP3METHODSPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_CDLXSIDEGAP3METHODS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_CDLXSIDEGAP3METHODS(
      startIdx,
      endIdx,
      inOpen,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_CDLXSIDEGAP3METHODSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_CDLXSIDEGAP3METHODS');
  late final _TA_S_CDLXSIDEGAP3METHODS =
      _TA_S_CDLXSIDEGAP3METHODSPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int TA_CDLXSIDEGAP3METHODS_Lookback() {
    return _TA_CDLXSIDEGAP3METHODS_Lookback();
  }

  late final _TA_CDLXSIDEGAP3METHODS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_CDLXSIDEGAP3METHODS_Lookback');
  late final _TA_CDLXSIDEGAP3METHODS_Lookback =
      _TA_CDLXSIDEGAP3METHODS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CEIL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_CEIL(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_CEILPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_CEIL');
  late final _TA_CEIL = _TA_CEILPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_CEIL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_CEIL(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_CEILPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_CEIL');
  late final _TA_S_CEIL = _TA_S_CEILPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_CEIL_Lookback() {
    return _TA_CEIL_Lookback();
  }

  late final _TA_CEIL_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_CEIL_Lookback');
  late final _TA_CEIL_Lookback =
      _TA_CEIL_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_CMO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_CMO(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_CMOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_CMO');
  late final _TA_CMO = _TA_CMOPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_CMO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_CMO(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_CMOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_CMO');
  late final _TA_S_CMO = _TA_S_CMOPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_CMO_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_CMO_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_CMO_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_CMO_Lookback');
  late final _TA_CMO_Lookback =
      _TA_CMO_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_CORREL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_CORREL(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_CORRELPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_CORREL');
  late final _TA_CORREL = _TA_CORRELPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_CORREL(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_CORREL(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_CORRELPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_CORREL');
  late final _TA_S_CORREL = _TA_S_CORRELPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_CORREL_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_CORREL_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_CORREL_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_CORREL_Lookback');
  late final _TA_CORREL_Lookback =
      _TA_CORREL_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_COS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_COS(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_COSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_COS');
  late final _TA_COS = _TA_COSPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_COS(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_COS(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_COSPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_COS');
  late final _TA_S_COS = _TA_S_COSPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_COS_Lookback() {
    return _TA_COS_Lookback();
  }

  late final _TA_COS_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_COS_Lookback');
  late final _TA_COS_Lookback =
      _TA_COS_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_COSH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_COSH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_COSHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_COSH');
  late final _TA_COSH = _TA_COSHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_COSH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_COSH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_COSHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_COSH');
  late final _TA_S_COSH = _TA_S_COSHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_COSH_Lookback() {
    return _TA_COSH_Lookback();
  }

  late final _TA_COSH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_COSH_Lookback');
  late final _TA_COSH_Lookback =
      _TA_COSH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_DEMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_DEMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_DEMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_DEMA');
  late final _TA_DEMA = _TA_DEMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_DEMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_DEMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_DEMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_DEMA');
  late final _TA_S_DEMA = _TA_S_DEMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_DEMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_DEMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_DEMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_DEMA_Lookback');
  late final _TA_DEMA_Lookback =
      _TA_DEMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_DIV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_DIV(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_DIVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_DIV');
  late final _TA_DIV = _TA_DIVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_DIV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_DIV(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_DIVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_DIV');
  late final _TA_S_DIV = _TA_S_DIVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_DIV_Lookback() {
    return _TA_DIV_Lookback();
  }

  late final _TA_DIV_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_DIV_Lookback');
  late final _TA_DIV_Lookback =
      _TA_DIV_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_DX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_DX(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_DXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_DX');
  late final _TA_DX = _TA_DXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_DX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_DX(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_DXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_DX');
  late final _TA_S_DX = _TA_S_DXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_DX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_DX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_DX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_DX_Lookback');
  late final _TA_DX_Lookback =
      _TA_DX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_EMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_EMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_EMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_EMA');
  late final _TA_EMA = _TA_EMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_EMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_EMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_EMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_EMA');
  late final _TA_S_EMA = _TA_S_EMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_EMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_EMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_EMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_EMA_Lookback');
  late final _TA_EMA_Lookback =
      _TA_EMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_EXP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_EXP(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_EXPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_EXP');
  late final _TA_EXP = _TA_EXPPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_EXP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_EXP(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_EXPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_EXP');
  late final _TA_S_EXP = _TA_S_EXPPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_EXP_Lookback() {
    return _TA_EXP_Lookback();
  }

  late final _TA_EXP_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_EXP_Lookback');
  late final _TA_EXP_Lookback =
      _TA_EXP_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_FLOOR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_FLOOR(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_FLOORPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_FLOOR');
  late final _TA_FLOOR = _TA_FLOORPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_FLOOR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_FLOOR(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_FLOORPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_FLOOR');
  late final _TA_S_FLOOR = _TA_S_FLOORPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_FLOOR_Lookback() {
    return _TA_FLOOR_Lookback();
  }

  late final _TA_FLOOR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_FLOOR_Lookback');
  late final _TA_FLOOR_Lookback =
      _TA_FLOOR_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_DCPERIOD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_HT_DCPERIOD(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_HT_DCPERIODPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_HT_DCPERIOD');
  late final _TA_HT_DCPERIOD = _TA_HT_DCPERIODPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_HT_DCPERIOD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_DCPERIOD(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_HT_DCPERIODPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_HT_DCPERIOD');
  late final _TA_S_HT_DCPERIOD = _TA_S_HT_DCPERIODPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_HT_DCPERIOD_Lookback() {
    return _TA_HT_DCPERIOD_Lookback();
  }

  late final _TA_HT_DCPERIOD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_HT_DCPERIOD_Lookback');
  late final _TA_HT_DCPERIOD_Lookback =
      _TA_HT_DCPERIOD_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_DCPHASE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_HT_DCPHASE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_HT_DCPHASEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_HT_DCPHASE');
  late final _TA_HT_DCPHASE = _TA_HT_DCPHASEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_HT_DCPHASE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_DCPHASE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_HT_DCPHASEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_HT_DCPHASE');
  late final _TA_S_HT_DCPHASE = _TA_S_HT_DCPHASEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_HT_DCPHASE_Lookback() {
    return _TA_HT_DCPHASE_Lookback();
  }

  late final _TA_HT_DCPHASE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_HT_DCPHASE_Lookback');
  late final _TA_HT_DCPHASE_Lookback =
      _TA_HT_DCPHASE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_PHASOR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outInPhase,
    ffi.Pointer<ffi.Double> outQuadrature,
  ) {
    return TA_RetCode.fromValue(_TA_HT_PHASOR(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outInPhase,
      outQuadrature,
    ));
  }

  late final _TA_HT_PHASORPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_HT_PHASOR');
  late final _TA_HT_PHASOR = _TA_HT_PHASORPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_HT_PHASOR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outInPhase,
    ffi.Pointer<ffi.Double> outQuadrature,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_PHASOR(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outInPhase,
      outQuadrature,
    ));
  }

  late final _TA_S_HT_PHASORPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_HT_PHASOR');
  late final _TA_S_HT_PHASOR = _TA_S_HT_PHASORPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_HT_PHASOR_Lookback() {
    return _TA_HT_PHASOR_Lookback();
  }

  late final _TA_HT_PHASOR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_HT_PHASOR_Lookback');
  late final _TA_HT_PHASOR_Lookback =
      _TA_HT_PHASOR_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_SINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outSine,
    ffi.Pointer<ffi.Double> outLeadSine,
  ) {
    return TA_RetCode.fromValue(_TA_HT_SINE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outSine,
      outLeadSine,
    ));
  }

  late final _TA_HT_SINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_HT_SINE');
  late final _TA_HT_SINE = _TA_HT_SINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_HT_SINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outSine,
    ffi.Pointer<ffi.Double> outLeadSine,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_SINE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outSine,
      outLeadSine,
    ));
  }

  late final _TA_S_HT_SINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_HT_SINE');
  late final _TA_S_HT_SINE = _TA_S_HT_SINEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_HT_SINE_Lookback() {
    return _TA_HT_SINE_Lookback();
  }

  late final _TA_HT_SINE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_HT_SINE_Lookback');
  late final _TA_HT_SINE_Lookback =
      _TA_HT_SINE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_TRENDLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_HT_TRENDLINE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_HT_TRENDLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_HT_TRENDLINE');
  late final _TA_HT_TRENDLINE = _TA_HT_TRENDLINEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_HT_TRENDLINE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_TRENDLINE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_HT_TRENDLINEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_HT_TRENDLINE');
  late final _TA_S_HT_TRENDLINE = _TA_S_HT_TRENDLINEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_HT_TRENDLINE_Lookback() {
    return _TA_HT_TRENDLINE_Lookback();
  }

  late final _TA_HT_TRENDLINE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_HT_TRENDLINE_Lookback');
  late final _TA_HT_TRENDLINE_Lookback =
      _TA_HT_TRENDLINE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_HT_TRENDMODE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_HT_TRENDMODE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_HT_TRENDMODEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_HT_TRENDMODE');
  late final _TA_HT_TRENDMODE = _TA_HT_TRENDMODEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_HT_TRENDMODE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_HT_TRENDMODE(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_HT_TRENDMODEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_HT_TRENDMODE');
  late final _TA_S_HT_TRENDMODE = _TA_S_HT_TRENDMODEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int TA_HT_TRENDMODE_Lookback() {
    return _TA_HT_TRENDMODE_Lookback();
  }

  late final _TA_HT_TRENDMODE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'TA_HT_TRENDMODE_Lookback');
  late final _TA_HT_TRENDMODE_Lookback =
      _TA_HT_TRENDMODE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_IMI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inOpen,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_IMI(
      startIdx,
      endIdx,
      inOpen,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_IMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_IMI');
  late final _TA_IMI = _TA_IMIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_IMI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inOpen,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_IMI(
      startIdx,
      endIdx,
      inOpen,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_IMIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_IMI');
  late final _TA_S_IMI = _TA_S_IMIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_IMI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_IMI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_IMI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_IMI_Lookback');
  late final _TA_IMI_Lookback =
      _TA_IMI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_KAMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_KAMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_KAMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_KAMA');
  late final _TA_KAMA = _TA_KAMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_KAMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_KAMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_KAMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_KAMA');
  late final _TA_S_KAMA = _TA_S_KAMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_KAMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_KAMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_KAMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_KAMA_Lookback');
  late final _TA_KAMA_Lookback =
      _TA_KAMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_LINEARREG(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LINEARREG(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LINEARREGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LINEARREG');
  late final _TA_LINEARREG = _TA_LINEARREGPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LINEARREG(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LINEARREG(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LINEARREGPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LINEARREG');
  late final _TA_S_LINEARREG = _TA_S_LINEARREGPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_LINEARREG_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_LINEARREG_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_LINEARREG_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_LINEARREG_Lookback');
  late final _TA_LINEARREG_Lookback =
      _TA_LINEARREG_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_LINEARREG_ANGLE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LINEARREG_ANGLE(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LINEARREG_ANGLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LINEARREG_ANGLE');
  late final _TA_LINEARREG_ANGLE = _TA_LINEARREG_ANGLEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LINEARREG_ANGLE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LINEARREG_ANGLE(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LINEARREG_ANGLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LINEARREG_ANGLE');
  late final _TA_S_LINEARREG_ANGLE = _TA_S_LINEARREG_ANGLEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_LINEARREG_ANGLE_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_LINEARREG_ANGLE_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_LINEARREG_ANGLE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_LINEARREG_ANGLE_Lookback');
  late final _TA_LINEARREG_ANGLE_Lookback =
      _TA_LINEARREG_ANGLE_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_LINEARREG_INTERCEPT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LINEARREG_INTERCEPT(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LINEARREG_INTERCEPTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LINEARREG_INTERCEPT');
  late final _TA_LINEARREG_INTERCEPT = _TA_LINEARREG_INTERCEPTPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LINEARREG_INTERCEPT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LINEARREG_INTERCEPT(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LINEARREG_INTERCEPTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LINEARREG_INTERCEPT');
  late final _TA_S_LINEARREG_INTERCEPT =
      _TA_S_LINEARREG_INTERCEPTPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Float>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>();

  int TA_LINEARREG_INTERCEPT_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_LINEARREG_INTERCEPT_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_LINEARREG_INTERCEPT_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_LINEARREG_INTERCEPT_Lookback');
  late final _TA_LINEARREG_INTERCEPT_Lookback =
      _TA_LINEARREG_INTERCEPT_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_LINEARREG_SLOPE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LINEARREG_SLOPE(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LINEARREG_SLOPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LINEARREG_SLOPE');
  late final _TA_LINEARREG_SLOPE = _TA_LINEARREG_SLOPEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LINEARREG_SLOPE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LINEARREG_SLOPE(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LINEARREG_SLOPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LINEARREG_SLOPE');
  late final _TA_S_LINEARREG_SLOPE = _TA_S_LINEARREG_SLOPEPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_LINEARREG_SLOPE_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_LINEARREG_SLOPE_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_LINEARREG_SLOPE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_LINEARREG_SLOPE_Lookback');
  late final _TA_LINEARREG_SLOPE_Lookback =
      _TA_LINEARREG_SLOPE_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_LN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LNPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LN');
  late final _TA_LN = _TA_LNPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LNPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LN');
  late final _TA_S_LN = _TA_S_LNPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_LN_Lookback() {
    return _TA_LN_Lookback();
  }

  late final _TA_LN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_LN_Lookback');
  late final _TA_LN_Lookback = _TA_LN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_LOG10(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_LOG10(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_LOG10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_LOG10');
  late final _TA_LOG10 = _TA_LOG10Ptr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_LOG10(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_LOG10(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_LOG10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_LOG10');
  late final _TA_S_LOG10 = _TA_S_LOG10Ptr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_LOG10_Lookback() {
    return _TA_LOG10_Lookback();
  }

  late final _TA_LOG10_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_LOG10_Lookback');
  late final _TA_LOG10_Lookback =
      _TA_LOG10_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_MA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MA');
  late final _TA_MA = _TA_MAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MA');
  late final _TA_S_MA = _TA_S_MAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MA_Lookback(
    int optInTimePeriod,
    TA_MAType optInMAType,
  ) {
    return _TA_MA_Lookback(
      optInTimePeriod,
      optInMAType.value,
    );
  }

  late final _TA_MA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedInt)>>(
          'TA_MA_Lookback');
  late final _TA_MA_Lookback =
      _TA_MA_LookbackPtr.asFunction<int Function(int, int)>();

  TA_RetCode TA_MACD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    int optInSignalPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_MACD(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInSignalPeriod,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_MACDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_MACD');
  late final _TA_MACD = _TA_MACDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MACD(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    int optInSignalPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_S_MACD(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInSignalPeriod,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_S_MACDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MACD');
  late final _TA_S_MACD = _TA_S_MACDPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MACD_Lookback(
    int optInFastPeriod,
    int optInSlowPeriod,
    int optInSignalPeriod,
  ) {
    return _TA_MACD_Lookback(
      optInFastPeriod,
      optInSlowPeriod,
      optInSignalPeriod,
    );
  }

  late final _TA_MACD_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'TA_MACD_Lookback');
  late final _TA_MACD_Lookback =
      _TA_MACD_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_MACDEXT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInFastPeriod,
    TA_MAType optInFastMAType,
    int optInSlowPeriod,
    TA_MAType optInSlowMAType,
    int optInSignalPeriod,
    TA_MAType optInSignalMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_MACDEXT(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInFastMAType.value,
      optInSlowPeriod,
      optInSlowMAType.value,
      optInSignalPeriod,
      optInSignalMAType.value,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_MACDEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_MACDEXT');
  late final _TA_MACDEXT = _TA_MACDEXTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MACDEXT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInFastPeriod,
    TA_MAType optInFastMAType,
    int optInSlowPeriod,
    TA_MAType optInSlowMAType,
    int optInSignalPeriod,
    TA_MAType optInSignalMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_S_MACDEXT(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInFastMAType.value,
      optInSlowPeriod,
      optInSlowMAType.value,
      optInSignalPeriod,
      optInSignalMAType.value,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_S_MACDEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MACDEXT');
  late final _TA_S_MACDEXT = _TA_S_MACDEXTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MACDEXT_Lookback(
    int optInFastPeriod,
    TA_MAType optInFastMAType,
    int optInSlowPeriod,
    TA_MAType optInSlowMAType,
    int optInSignalPeriod,
    TA_MAType optInSignalMAType,
  ) {
    return _TA_MACDEXT_Lookback(
      optInFastPeriod,
      optInFastMAType.value,
      optInSlowPeriod,
      optInSlowMAType.value,
      optInSignalPeriod,
      optInSignalMAType.value,
    );
  }

  late final _TA_MACDEXT_LookbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedInt, ffi.Int, ffi.UnsignedInt,
              ffi.Int, ffi.UnsignedInt)>>('TA_MACDEXT_Lookback');
  late final _TA_MACDEXT_Lookback = _TA_MACDEXT_LookbackPtr.asFunction<
      int Function(int, int, int, int, int, int)>();

  TA_RetCode TA_MACDFIX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInSignalPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_MACDFIX(
      startIdx,
      endIdx,
      inReal,
      optInSignalPeriod,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_MACDFIXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_MACDFIX');
  late final _TA_MACDFIX = _TA_MACDFIXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MACDFIX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInSignalPeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMACD,
    ffi.Pointer<ffi.Double> outMACDSignal,
    ffi.Pointer<ffi.Double> outMACDHist,
  ) {
    return TA_RetCode.fromValue(_TA_S_MACDFIX(
      startIdx,
      endIdx,
      inReal,
      optInSignalPeriod,
      outBegIdx,
      outNBElement,
      outMACD,
      outMACDSignal,
      outMACDHist,
    ));
  }

  late final _TA_S_MACDFIXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MACDFIX');
  late final _TA_S_MACDFIX = _TA_S_MACDFIXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MACDFIX_Lookback(
    int optInSignalPeriod,
  ) {
    return _TA_MACDFIX_Lookback(
      optInSignalPeriod,
    );
  }

  late final _TA_MACDFIX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MACDFIX_Lookback');
  late final _TA_MACDFIX_Lookback =
      _TA_MACDFIX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MAMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    double optInFastLimit,
    double optInSlowLimit,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMAMA,
    ffi.Pointer<ffi.Double> outFAMA,
  ) {
    return TA_RetCode.fromValue(_TA_MAMA(
      startIdx,
      endIdx,
      inReal,
      optInFastLimit,
      optInSlowLimit,
      outBegIdx,
      outNBElement,
      outMAMA,
      outFAMA,
    ));
  }

  late final _TA_MAMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_MAMA');
  late final _TA_MAMA = _TA_MAMAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MAMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    double optInFastLimit,
    double optInSlowLimit,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMAMA,
    ffi.Pointer<ffi.Double> outFAMA,
  ) {
    return TA_RetCode.fromValue(_TA_S_MAMA(
      startIdx,
      endIdx,
      inReal,
      optInFastLimit,
      optInSlowLimit,
      outBegIdx,
      outNBElement,
      outMAMA,
      outFAMA,
    ));
  }

  late final _TA_S_MAMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MAMA');
  late final _TA_S_MAMA = _TA_S_MAMAPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MAMA_Lookback(
    double optInFastLimit,
    double optInSlowLimit,
  ) {
    return _TA_MAMA_Lookback(
      optInFastLimit,
      optInSlowLimit,
    );
  }

  late final _TA_MAMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          'TA_MAMA_Lookback');
  late final _TA_MAMA_Lookback =
      _TA_MAMA_LookbackPtr.asFunction<int Function(double, double)>();

  TA_RetCode TA_MAVP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Double> inPeriods,
    int optInMinPeriod,
    int optInMaxPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MAVP(
      startIdx,
      endIdx,
      inReal,
      inPeriods,
      optInMinPeriod,
      optInMaxPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MAVPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MAVP');
  late final _TA_MAVP = _TA_MAVPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MAVP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Float> inPeriods,
    int optInMinPeriod,
    int optInMaxPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MAVP(
      startIdx,
      endIdx,
      inReal,
      inPeriods,
      optInMinPeriod,
      optInMaxPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MAVPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MAVP');
  late final _TA_S_MAVP = _TA_S_MAVPPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MAVP_Lookback(
    int optInMinPeriod,
    int optInMaxPeriod,
    TA_MAType optInMAType,
  ) {
    return _TA_MAVP_Lookback(
      optInMinPeriod,
      optInMaxPeriod,
      optInMAType.value,
    );
  }

  late final _TA_MAVP_LookbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.UnsignedInt)>>(
      'TA_MAVP_Lookback');
  late final _TA_MAVP_Lookback =
      _TA_MAVP_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_MAX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MAX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MAXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MAX');
  late final _TA_MAX = _TA_MAXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MAX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MAX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MAXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MAX');
  late final _TA_S_MAX = _TA_S_MAXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_MAX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MAX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MAX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_MAX_Lookback');
  late final _TA_MAX_Lookback =
      _TA_MAX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MAXINDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_MAXINDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_MAXINDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_MAXINDEX');
  late final _TA_MAXINDEX = _TA_MAXINDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_MAXINDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_MAXINDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_MAXINDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_MAXINDEX');
  late final _TA_S_MAXINDEX = _TA_S_MAXINDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int TA_MAXINDEX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MAXINDEX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MAXINDEX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MAXINDEX_Lookback');
  late final _TA_MAXINDEX_Lookback =
      _TA_MAXINDEX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MEDPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MEDPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MEDPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MEDPRICE');
  late final _TA_MEDPRICE = _TA_MEDPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MEDPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MEDPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MEDPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MEDPRICE');
  late final _TA_S_MEDPRICE = _TA_S_MEDPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MEDPRICE_Lookback() {
    return _TA_MEDPRICE_Lookback();
  }

  late final _TA_MEDPRICE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_MEDPRICE_Lookback');
  late final _TA_MEDPRICE_Lookback =
      _TA_MEDPRICE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_MFI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Double> inVolume,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MFI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MFIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MFI');
  late final _TA_MFI = _TA_MFIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MFI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Float> inVolume,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MFI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      inVolume,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MFIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MFI');
  late final _TA_S_MFI = _TA_S_MFIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MFI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MFI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MFI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_MFI_Lookback');
  late final _TA_MFI_Lookback =
      _TA_MFI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MIDPOINT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MIDPOINT(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MIDPOINTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MIDPOINT');
  late final _TA_MIDPOINT = _TA_MIDPOINTPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MIDPOINT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MIDPOINT(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MIDPOINTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MIDPOINT');
  late final _TA_S_MIDPOINT = _TA_S_MIDPOINTPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_MIDPOINT_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MIDPOINT_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MIDPOINT_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MIDPOINT_Lookback');
  late final _TA_MIDPOINT_Lookback =
      _TA_MIDPOINT_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MIDPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MIDPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MIDPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MIDPRICE');
  late final _TA_MIDPRICE = _TA_MIDPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MIDPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MIDPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MIDPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MIDPRICE');
  late final _TA_S_MIDPRICE = _TA_S_MIDPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MIDPRICE_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MIDPRICE_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MIDPRICE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MIDPRICE_Lookback');
  late final _TA_MIDPRICE_Lookback =
      _TA_MIDPRICE_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MIN(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MIN');
  late final _TA_MIN = _TA_MINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MIN(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MIN');
  late final _TA_S_MIN = _TA_S_MINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_MIN_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MIN_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MIN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_MIN_Lookback');
  late final _TA_MIN_Lookback =
      _TA_MIN_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MININDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_MININDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_MININDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_MININDEX');
  late final _TA_MININDEX = _TA_MININDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_MININDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outInteger,
  ) {
    return TA_RetCode.fromValue(_TA_S_MININDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outInteger,
    ));
  }

  late final _TA_S_MININDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_MININDEX');
  late final _TA_S_MININDEX = _TA_S_MININDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int TA_MININDEX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MININDEX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MININDEX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MININDEX_Lookback');
  late final _TA_MININDEX_Lookback =
      _TA_MININDEX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MINMAX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMin,
    ffi.Pointer<ffi.Double> outMax,
  ) {
    return TA_RetCode.fromValue(_TA_MINMAX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outMin,
      outMax,
    ));
  }

  late final _TA_MINMAXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_MINMAX');
  late final _TA_MINMAX = _TA_MINMAXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MINMAX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outMin,
    ffi.Pointer<ffi.Double> outMax,
  ) {
    return TA_RetCode.fromValue(_TA_S_MINMAX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outMin,
      outMax,
    ));
  }

  late final _TA_S_MINMAXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MINMAX');
  late final _TA_S_MINMAX = _TA_S_MINMAXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MINMAX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MINMAX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MINMAX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MINMAX_Lookback');
  late final _TA_MINMAX_Lookback =
      _TA_MINMAX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MINMAXINDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outMinIdx,
    ffi.Pointer<ffi.Int> outMaxIdx,
  ) {
    return TA_RetCode.fromValue(_TA_MINMAXINDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outMinIdx,
      outMaxIdx,
    ));
  }

  late final _TA_MINMAXINDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_MINMAXINDEX');
  late final _TA_MINMAXINDEX = _TA_MINMAXINDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  TA_RetCode TA_S_MINMAXINDEX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Int> outMinIdx,
    ffi.Pointer<ffi.Int> outMaxIdx,
  ) {
    return TA_RetCode.fromValue(_TA_S_MINMAXINDEX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outMinIdx,
      outMaxIdx,
    ));
  }

  late final _TA_S_MINMAXINDEXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('TA_S_MINMAXINDEX');
  late final _TA_S_MINMAXINDEX = _TA_S_MINMAXINDEXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int TA_MINMAXINDEX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MINMAXINDEX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MINMAXINDEX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MINMAXINDEX_Lookback');
  late final _TA_MINMAXINDEX_Lookback =
      _TA_MINMAXINDEX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MINUS_DI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MINUS_DI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MINUS_DIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MINUS_DI');
  late final _TA_MINUS_DI = _TA_MINUS_DIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MINUS_DI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MINUS_DI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MINUS_DIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MINUS_DI');
  late final _TA_S_MINUS_DI = _TA_S_MINUS_DIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MINUS_DI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MINUS_DI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MINUS_DI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MINUS_DI_Lookback');
  late final _TA_MINUS_DI_Lookback =
      _TA_MINUS_DI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MINUS_DM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MINUS_DM(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MINUS_DMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MINUS_DM');
  late final _TA_MINUS_DM = _TA_MINUS_DMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MINUS_DM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MINUS_DM(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MINUS_DMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MINUS_DM');
  late final _TA_S_MINUS_DM = _TA_S_MINUS_DMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MINUS_DM_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MINUS_DM_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MINUS_DM_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_MINUS_DM_Lookback');
  late final _TA_MINUS_DM_Lookback =
      _TA_MINUS_DM_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MOM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MOM(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MOMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MOM');
  late final _TA_MOM = _TA_MOMPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MOM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MOM(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MOMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MOM');
  late final _TA_S_MOM = _TA_S_MOMPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_MOM_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_MOM_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_MOM_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_MOM_Lookback');
  late final _TA_MOM_Lookback =
      _TA_MOM_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_MULT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_MULT(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_MULTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_MULT');
  late final _TA_MULT = _TA_MULTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_MULT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_MULT(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_MULTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_MULT');
  late final _TA_S_MULT = _TA_S_MULTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_MULT_Lookback() {
    return _TA_MULT_Lookback();
  }

  late final _TA_MULT_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_MULT_Lookback');
  late final _TA_MULT_Lookback =
      _TA_MULT_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_NATR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_NATR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_NATRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_NATR');
  late final _TA_NATR = _TA_NATRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_NATR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_NATR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_NATRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_NATR');
  late final _TA_S_NATR = _TA_S_NATRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_NATR_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_NATR_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_NATR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_NATR_Lookback');
  late final _TA_NATR_Lookback =
      _TA_NATR_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_OBV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Double> inVolume,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_OBV(
      startIdx,
      endIdx,
      inReal,
      inVolume,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_OBVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_OBV');
  late final _TA_OBV = _TA_OBVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_OBV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Float> inVolume,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_OBV(
      startIdx,
      endIdx,
      inReal,
      inVolume,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_OBVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_OBV');
  late final _TA_S_OBV = _TA_S_OBVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_OBV_Lookback() {
    return _TA_OBV_Lookback();
  }

  late final _TA_OBV_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_OBV_Lookback');
  late final _TA_OBV_Lookback =
      _TA_OBV_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_PLUS_DI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_PLUS_DI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_PLUS_DIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_PLUS_DI');
  late final _TA_PLUS_DI = _TA_PLUS_DIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_PLUS_DI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_PLUS_DI(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_PLUS_DIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_PLUS_DI');
  late final _TA_S_PLUS_DI = _TA_S_PLUS_DIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_PLUS_DI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_PLUS_DI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_PLUS_DI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_PLUS_DI_Lookback');
  late final _TA_PLUS_DI_Lookback =
      _TA_PLUS_DI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_PLUS_DM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_PLUS_DM(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_PLUS_DMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_PLUS_DM');
  late final _TA_PLUS_DM = _TA_PLUS_DMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_PLUS_DM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_PLUS_DM(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_PLUS_DMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_PLUS_DM');
  late final _TA_S_PLUS_DM = _TA_S_PLUS_DMPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_PLUS_DM_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_PLUS_DM_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_PLUS_DM_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_PLUS_DM_Lookback');
  late final _TA_PLUS_DM_Lookback =
      _TA_PLUS_DM_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_PPO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_PPO(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_PPOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_PPO');
  late final _TA_PPO = _TA_PPOPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_PPO(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_PPO(
      startIdx,
      endIdx,
      inReal,
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_PPOPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_PPO');
  late final _TA_S_PPO = _TA_S_PPOPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_PPO_Lookback(
    int optInFastPeriod,
    int optInSlowPeriod,
    TA_MAType optInMAType,
  ) {
    return _TA_PPO_Lookback(
      optInFastPeriod,
      optInSlowPeriod,
      optInMAType.value,
    );
  }

  late final _TA_PPO_LookbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.UnsignedInt)>>(
      'TA_PPO_Lookback');
  late final _TA_PPO_Lookback =
      _TA_PPO_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_ROC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ROC(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ROCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ROC');
  late final _TA_ROC = _TA_ROCPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ROC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ROC(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ROCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ROC');
  late final _TA_S_ROC = _TA_S_ROCPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ROC_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ROC_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ROC_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_ROC_Lookback');
  late final _TA_ROC_Lookback =
      _TA_ROC_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ROCP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ROCP(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ROCPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ROCP');
  late final _TA_ROCP = _TA_ROCPPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ROCP(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ROCP(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ROCPPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ROCP');
  late final _TA_S_ROCP = _TA_S_ROCPPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ROCP_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ROCP_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ROCP_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_ROCP_Lookback');
  late final _TA_ROCP_Lookback =
      _TA_ROCP_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ROCR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ROCR(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ROCRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ROCR');
  late final _TA_ROCR = _TA_ROCRPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ROCR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ROCR(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ROCRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ROCR');
  late final _TA_S_ROCR = _TA_S_ROCRPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ROCR_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ROCR_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ROCR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_ROCR_Lookback');
  late final _TA_ROCR_Lookback =
      _TA_ROCR_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_ROCR100(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ROCR100(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ROCR100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ROCR100');
  late final _TA_ROCR100 = _TA_ROCR100Ptr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ROCR100(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ROCR100(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ROCR100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ROCR100');
  late final _TA_S_ROCR100 = _TA_S_ROCR100Ptr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_ROCR100_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_ROCR100_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_ROCR100_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_ROCR100_Lookback');
  late final _TA_ROCR100_Lookback =
      _TA_ROCR100_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_RSI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_RSI(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_RSIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_RSI');
  late final _TA_RSI = _TA_RSIPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_RSI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_RSI(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_RSIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_RSI');
  late final _TA_S_RSI = _TA_S_RSIPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_RSI_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_RSI_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_RSI_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_RSI_Lookback');
  late final _TA_RSI_Lookback =
      _TA_RSI_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_SAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    double optInAcceleration,
    double optInMaximum,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SAR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInAcceleration,
      optInMaximum,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SAR');
  late final _TA_SAR = _TA_SARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    double optInAcceleration,
    double optInMaximum,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SAR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInAcceleration,
      optInMaximum,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SAR');
  late final _TA_S_SAR = _TA_S_SARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_SAR_Lookback(
    double optInAcceleration,
    double optInMaximum,
  ) {
    return _TA_SAR_Lookback(
      optInAcceleration,
      optInMaximum,
    );
  }

  late final _TA_SAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          'TA_SAR_Lookback');
  late final _TA_SAR_Lookback =
      _TA_SAR_LookbackPtr.asFunction<int Function(double, double)>();

  TA_RetCode TA_SAREXT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    double optInStartValue,
    double optInOffsetOnReverse,
    double optInAccelerationInitLong,
    double optInAccelerationLong,
    double optInAccelerationMaxLong,
    double optInAccelerationInitShort,
    double optInAccelerationShort,
    double optInAccelerationMaxShort,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SAREXT(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInStartValue,
      optInOffsetOnReverse,
      optInAccelerationInitLong,
      optInAccelerationLong,
      optInAccelerationMaxLong,
      optInAccelerationInitShort,
      optInAccelerationShort,
      optInAccelerationMaxShort,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SAREXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SAREXT');
  late final _TA_SAREXT = _TA_SAREXTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SAREXT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    double optInStartValue,
    double optInOffsetOnReverse,
    double optInAccelerationInitLong,
    double optInAccelerationLong,
    double optInAccelerationMaxLong,
    double optInAccelerationInitShort,
    double optInAccelerationShort,
    double optInAccelerationMaxShort,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SAREXT(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      optInStartValue,
      optInOffsetOnReverse,
      optInAccelerationInitLong,
      optInAccelerationLong,
      optInAccelerationMaxLong,
      optInAccelerationInitShort,
      optInAccelerationShort,
      optInAccelerationMaxShort,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SAREXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SAREXT');
  late final _TA_S_SAREXT = _TA_S_SAREXTPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_SAREXT_Lookback(
    double optInStartValue,
    double optInOffsetOnReverse,
    double optInAccelerationInitLong,
    double optInAccelerationLong,
    double optInAccelerationMaxLong,
    double optInAccelerationInitShort,
    double optInAccelerationShort,
    double optInAccelerationMaxShort,
  ) {
    return _TA_SAREXT_Lookback(
      optInStartValue,
      optInOffsetOnReverse,
      optInAccelerationInitLong,
      optInAccelerationLong,
      optInAccelerationMaxLong,
      optInAccelerationInitShort,
      optInAccelerationShort,
      optInAccelerationMaxShort,
    );
  }

  late final _TA_SAREXT_LookbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('TA_SAREXT_Lookback');
  late final _TA_SAREXT_Lookback = _TA_SAREXT_LookbackPtr.asFunction<
      int Function(
          double, double, double, double, double, double, double, double)>();

  TA_RetCode TA_SIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SIN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SIN');
  late final _TA_SIN = _TA_SINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SIN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SIN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SINPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SIN');
  late final _TA_S_SIN = _TA_S_SINPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_SIN_Lookback() {
    return _TA_SIN_Lookback();
  }

  late final _TA_SIN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_SIN_Lookback');
  late final _TA_SIN_Lookback =
      _TA_SIN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_SINH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SINH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SINHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SINH');
  late final _TA_SINH = _TA_SINHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SINH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SINH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SINHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SINH');
  late final _TA_S_SINH = _TA_S_SINHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_SINH_Lookback() {
    return _TA_SINH_Lookback();
  }

  late final _TA_SINH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_SINH_Lookback');
  late final _TA_SINH_Lookback =
      _TA_SINH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_SMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SMA');
  late final _TA_SMA = _TA_SMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SMA');
  late final _TA_S_SMA = _TA_S_SMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_SMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_SMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_SMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_SMA_Lookback');
  late final _TA_SMA_Lookback =
      _TA_SMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_SQRT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SQRT(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SQRTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SQRT');
  late final _TA_SQRT = _TA_SQRTPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SQRT(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SQRT(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SQRTPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SQRT');
  late final _TA_S_SQRT = _TA_S_SQRTPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_SQRT_Lookback() {
    return _TA_SQRT_Lookback();
  }

  late final _TA_SQRT_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_SQRT_Lookback');
  late final _TA_SQRT_Lookback =
      _TA_SQRT_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_STDDEV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    double optInNbDev,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_STDDEV(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDev,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_STDDEVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_STDDEV');
  late final _TA_STDDEV = _TA_STDDEVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_STDDEV(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    double optInNbDev,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_STDDEV(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDev,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_STDDEVPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_STDDEV');
  late final _TA_S_STDDEV = _TA_S_STDDEVPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_STDDEV_Lookback(
    int optInTimePeriod,
    double optInNbDev,
  ) {
    return _TA_STDDEV_Lookback(
      optInTimePeriod,
      optInNbDev,
    );
  }

  late final _TA_STDDEV_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Double)>>(
          'TA_STDDEV_Lookback');
  late final _TA_STDDEV_Lookback =
      _TA_STDDEV_LookbackPtr.asFunction<int Function(int, double)>();

  TA_RetCode TA_STOCH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInFastK_Period,
    int optInSlowK_Period,
    TA_MAType optInSlowK_MAType,
    int optInSlowD_Period,
    TA_MAType optInSlowD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outSlowK,
    ffi.Pointer<ffi.Double> outSlowD,
  ) {
    return TA_RetCode.fromValue(_TA_STOCH(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInFastK_Period,
      optInSlowK_Period,
      optInSlowK_MAType.value,
      optInSlowD_Period,
      optInSlowD_MAType.value,
      outBegIdx,
      outNBElement,
      outSlowK,
      outSlowD,
    ));
  }

  late final _TA_STOCHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_STOCH');
  late final _TA_STOCH = _TA_STOCHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_STOCH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInFastK_Period,
    int optInSlowK_Period,
    TA_MAType optInSlowK_MAType,
    int optInSlowD_Period,
    TA_MAType optInSlowD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outSlowK,
    ffi.Pointer<ffi.Double> outSlowD,
  ) {
    return TA_RetCode.fromValue(_TA_S_STOCH(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInFastK_Period,
      optInSlowK_Period,
      optInSlowK_MAType.value,
      optInSlowD_Period,
      optInSlowD_MAType.value,
      outBegIdx,
      outNBElement,
      outSlowK,
      outSlowD,
    ));
  }

  late final _TA_S_STOCHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_STOCH');
  late final _TA_S_STOCH = _TA_S_STOCHPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_STOCH_Lookback(
    int optInFastK_Period,
    int optInSlowK_Period,
    TA_MAType optInSlowK_MAType,
    int optInSlowD_Period,
    TA_MAType optInSlowD_MAType,
  ) {
    return _TA_STOCH_Lookback(
      optInFastK_Period,
      optInSlowK_Period,
      optInSlowK_MAType.value,
      optInSlowD_Period,
      optInSlowD_MAType.value,
    );
  }

  late final _TA_STOCH_LookbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.UnsignedInt, ffi.Int,
              ffi.UnsignedInt)>>('TA_STOCH_Lookback');
  late final _TA_STOCH_Lookback =
      _TA_STOCH_LookbackPtr.asFunction<int Function(int, int, int, int, int)>();

  TA_RetCode TA_STOCHF(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outFastK,
    ffi.Pointer<ffi.Double> outFastD,
  ) {
    return TA_RetCode.fromValue(_TA_STOCHF(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
      outBegIdx,
      outNBElement,
      outFastK,
      outFastD,
    ));
  }

  late final _TA_STOCHFPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_STOCHF');
  late final _TA_STOCHF = _TA_STOCHFPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_STOCHF(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outFastK,
    ffi.Pointer<ffi.Double> outFastD,
  ) {
    return TA_RetCode.fromValue(_TA_S_STOCHF(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
      outBegIdx,
      outNBElement,
      outFastK,
      outFastD,
    ));
  }

  late final _TA_S_STOCHFPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_STOCHF');
  late final _TA_S_STOCHF = _TA_S_STOCHFPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_STOCHF_Lookback(
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
  ) {
    return _TA_STOCHF_Lookback(
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
    );
  }

  late final _TA_STOCHF_LookbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.UnsignedInt)>>(
      'TA_STOCHF_Lookback');
  late final _TA_STOCHF_Lookback =
      _TA_STOCHF_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_STOCHRSI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outFastK,
    ffi.Pointer<ffi.Double> outFastD,
  ) {
    return TA_RetCode.fromValue(_TA_STOCHRSI(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
      outBegIdx,
      outNBElement,
      outFastK,
      outFastD,
    ));
  }

  late final _TA_STOCHRSIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_STOCHRSI');
  late final _TA_STOCHRSI = _TA_STOCHRSIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_STOCHRSI(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outFastK,
    ffi.Pointer<ffi.Double> outFastD,
  ) {
    return TA_RetCode.fromValue(_TA_S_STOCHRSI(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
      outBegIdx,
      outNBElement,
      outFastK,
      outFastD,
    ));
  }

  late final _TA_S_STOCHRSIPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('TA_S_STOCHRSI');
  late final _TA_S_STOCHRSI = _TA_S_STOCHRSIPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int TA_STOCHRSI_Lookback(
    int optInTimePeriod,
    int optInFastK_Period,
    int optInFastD_Period,
    TA_MAType optInFastD_MAType,
  ) {
    return _TA_STOCHRSI_Lookback(
      optInTimePeriod,
      optInFastK_Period,
      optInFastD_Period,
      optInFastD_MAType.value,
    );
  }

  late final _TA_STOCHRSI_LookbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.UnsignedInt)>>('TA_STOCHRSI_Lookback');
  late final _TA_STOCHRSI_Lookback =
      _TA_STOCHRSI_LookbackPtr.asFunction<int Function(int, int, int, int)>();

  TA_RetCode TA_SUB(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal0,
    ffi.Pointer<ffi.Double> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SUB(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SUBPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SUB');
  late final _TA_SUB = _TA_SUBPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SUB(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal0,
    ffi.Pointer<ffi.Float> inReal1,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SUB(
      startIdx,
      endIdx,
      inReal0,
      inReal1,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SUBPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SUB');
  late final _TA_S_SUB = _TA_S_SUBPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_SUB_Lookback() {
    return _TA_SUB_Lookback();
  }

  late final _TA_SUB_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_SUB_Lookback');
  late final _TA_SUB_Lookback =
      _TA_SUB_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_SUM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_SUM(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_SUMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_SUM');
  late final _TA_SUM = _TA_SUMPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_SUM(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_SUM(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_SUMPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_SUM');
  late final _TA_S_SUM = _TA_S_SUMPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_SUM_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_SUM_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_SUM_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_SUM_Lookback');
  late final _TA_SUM_Lookback =
      _TA_SUM_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_T3(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    double optInVFactor,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_T3(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInVFactor,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_T3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_T3');
  late final _TA_T3 = _TA_T3Ptr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_T3(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    double optInVFactor,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_T3(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInVFactor,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_T3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_T3');
  late final _TA_S_T3 = _TA_S_T3Ptr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_T3_Lookback(
    int optInTimePeriod,
    double optInVFactor,
  ) {
    return _TA_T3_Lookback(
      optInTimePeriod,
      optInVFactor,
    );
  }

  late final _TA_T3_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Double)>>(
          'TA_T3_Lookback');
  late final _TA_T3_Lookback =
      _TA_T3_LookbackPtr.asFunction<int Function(int, double)>();

  TA_RetCode TA_TAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TAN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TAN');
  late final _TA_TAN = _TA_TANPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TAN(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TAN(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TANPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TAN');
  late final _TA_S_TAN = _TA_S_TANPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TAN_Lookback() {
    return _TA_TAN_Lookback();
  }

  late final _TA_TAN_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_TAN_Lookback');
  late final _TA_TAN_Lookback =
      _TA_TAN_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_TANH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TANH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TANHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TANH');
  late final _TA_TANH = _TA_TANHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TANH(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TANH(
      startIdx,
      endIdx,
      inReal,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TANHPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TANH');
  late final _TA_S_TANH = _TA_S_TANHPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TANH_Lookback() {
    return _TA_TANH_Lookback();
  }

  late final _TA_TANH_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_TANH_Lookback');
  late final _TA_TANH_Lookback =
      _TA_TANH_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_TEMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TEMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TEMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TEMA');
  late final _TA_TEMA = _TA_TEMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TEMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TEMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TEMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TEMA');
  late final _TA_S_TEMA = _TA_S_TEMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TEMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_TEMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_TEMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_TEMA_Lookback');
  late final _TA_TEMA_Lookback =
      _TA_TEMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_TRANGE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TRANGE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TRANGEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TRANGE');
  late final _TA_TRANGE = _TA_TRANGEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TRANGE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TRANGE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TRANGEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TRANGE');
  late final _TA_S_TRANGE = _TA_S_TRANGEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_TRANGE_Lookback() {
    return _TA_TRANGE_Lookback();
  }

  late final _TA_TRANGE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_TRANGE_Lookback');
  late final _TA_TRANGE_Lookback =
      _TA_TRANGE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_TRIMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TRIMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TRIMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TRIMA');
  late final _TA_TRIMA = _TA_TRIMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TRIMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TRIMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TRIMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TRIMA');
  late final _TA_S_TRIMA = _TA_S_TRIMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TRIMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_TRIMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_TRIMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_TRIMA_Lookback');
  late final _TA_TRIMA_Lookback =
      _TA_TRIMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_TRIX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TRIX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TRIXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TRIX');
  late final _TA_TRIX = _TA_TRIXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TRIX(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TRIX(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TRIXPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TRIX');
  late final _TA_S_TRIX = _TA_S_TRIXPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TRIX_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_TRIX_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_TRIX_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_TRIX_Lookback');
  late final _TA_TRIX_Lookback =
      _TA_TRIX_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_TSF(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TSF(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TSFPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TSF');
  late final _TA_TSF = _TA_TSFPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TSF(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TSF(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TSFPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TSF');
  late final _TA_S_TSF = _TA_S_TSFPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_TSF_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_TSF_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_TSF_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_TSF_Lookback');
  late final _TA_TSF_Lookback =
      _TA_TSF_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_TYPPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_TYPPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_TYPPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_TYPPRICE');
  late final _TA_TYPPRICE = _TA_TYPPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_TYPPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_TYPPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_TYPPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_TYPPRICE');
  late final _TA_S_TYPPRICE = _TA_S_TYPPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_TYPPRICE_Lookback() {
    return _TA_TYPPRICE_Lookback();
  }

  late final _TA_TYPPRICE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_TYPPRICE_Lookback');
  late final _TA_TYPPRICE_Lookback =
      _TA_TYPPRICE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_ULTOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod1,
    int optInTimePeriod2,
    int optInTimePeriod3,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_ULTOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod1,
      optInTimePeriod2,
      optInTimePeriod3,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_ULTOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_ULTOSC');
  late final _TA_ULTOSC = _TA_ULTOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_ULTOSC(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod1,
    int optInTimePeriod2,
    int optInTimePeriod3,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_ULTOSC(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod1,
      optInTimePeriod2,
      optInTimePeriod3,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_ULTOSCPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_ULTOSC');
  late final _TA_S_ULTOSC = _TA_S_ULTOSCPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_ULTOSC_Lookback(
    int optInTimePeriod1,
    int optInTimePeriod2,
    int optInTimePeriod3,
  ) {
    return _TA_ULTOSC_Lookback(
      optInTimePeriod1,
      optInTimePeriod2,
      optInTimePeriod3,
    );
  }

  late final _TA_ULTOSC_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'TA_ULTOSC_Lookback');
  late final _TA_ULTOSC_Lookback =
      _TA_ULTOSC_LookbackPtr.asFunction<int Function(int, int, int)>();

  TA_RetCode TA_VAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    double optInNbDev,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_VAR(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDev,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_VARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_VAR');
  late final _TA_VAR = _TA_VARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_VAR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    double optInNbDev,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_VAR(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      optInNbDev,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_VARPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_VAR');
  late final _TA_S_VAR = _TA_S_VARPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_VAR_Lookback(
    int optInTimePeriod,
    double optInNbDev,
  ) {
    return _TA_VAR_Lookback(
      optInTimePeriod,
      optInNbDev,
    );
  }

  late final _TA_VAR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Double)>>(
          'TA_VAR_Lookback');
  late final _TA_VAR_Lookback =
      _TA_VAR_LookbackPtr.asFunction<int Function(int, double)>();

  TA_RetCode TA_WCLPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_WCLPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_WCLPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_WCLPRICE');
  late final _TA_WCLPRICE = _TA_WCLPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_WCLPRICE(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_WCLPRICE(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_WCLPRICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_WCLPRICE');
  late final _TA_S_WCLPRICE = _TA_S_WCLPRICEPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_WCLPRICE_Lookback() {
    return _TA_WCLPRICE_Lookback();
  }

  late final _TA_WCLPRICE_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TA_WCLPRICE_Lookback');
  late final _TA_WCLPRICE_Lookback =
      _TA_WCLPRICE_LookbackPtr.asFunction<int Function()>();

  TA_RetCode TA_WILLR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inHigh,
    ffi.Pointer<ffi.Double> inLow,
    ffi.Pointer<ffi.Double> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_WILLR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_WILLRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_WILLR');
  late final _TA_WILLR = _TA_WILLRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_WILLR(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inHigh,
    ffi.Pointer<ffi.Float> inLow,
    ffi.Pointer<ffi.Float> inClose,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_WILLR(
      startIdx,
      endIdx,
      inHigh,
      inLow,
      inClose,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_WILLRPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_WILLR');
  late final _TA_S_WILLR = _TA_S_WILLRPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>)>();

  int TA_WILLR_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_WILLR_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_WILLR_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'TA_WILLR_Lookback');
  late final _TA_WILLR_Lookback =
      _TA_WILLR_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_WMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Double> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_WMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_WMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_WMA');
  late final _TA_WMA = _TA_WMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  TA_RetCode TA_S_WMA(
    int startIdx,
    int endIdx,
    ffi.Pointer<ffi.Float> inReal,
    int optInTimePeriod,
    ffi.Pointer<ffi.Int> outBegIdx,
    ffi.Pointer<ffi.Int> outNBElement,
    ffi.Pointer<ffi.Double> outReal,
  ) {
    return TA_RetCode.fromValue(_TA_S_WMA(
      startIdx,
      endIdx,
      inReal,
      optInTimePeriod,
      outBegIdx,
      outNBElement,
      outReal,
    ));
  }

  late final _TA_S_WMAPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('TA_S_WMA');
  late final _TA_S_WMA = _TA_S_WMAPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int TA_WMA_Lookback(
    int optInTimePeriod,
  ) {
    return _TA_WMA_Lookback(
      optInTimePeriod,
    );
  }

  late final _TA_WMA_LookbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('TA_WMA_Lookback');
  late final _TA_WMA_Lookback =
      _TA_WMA_LookbackPtr.asFunction<int Function(int)>();

  TA_RetCode TA_SetUnstablePeriod(
    TA_FuncUnstId id,
    int unstablePeriod,
  ) {
    return TA_RetCode.fromValue(_TA_SetUnstablePeriod(
      id.value,
      unstablePeriod,
    ));
  }

  late final _TA_SetUnstablePeriodPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Int, ffi.UnsignedInt)>>(
      'TA_SetUnstablePeriod');
  late final _TA_SetUnstablePeriod =
      _TA_SetUnstablePeriodPtr.asFunction<int Function(int, int)>();

  int TA_GetUnstablePeriod(
    TA_FuncUnstId id,
  ) {
    return _TA_GetUnstablePeriod(
      id.value,
    );
  }

  late final _TA_GetUnstablePeriodPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
          'TA_GetUnstablePeriod');
  late final _TA_GetUnstablePeriod =
      _TA_GetUnstablePeriodPtr.asFunction<int Function(int)>();

  TA_RetCode TA_SetCompatibility(
    TA_Compatibility value,
  ) {
    return TA_RetCode.fromValue(_TA_SetCompatibility(
      value.value,
    ));
  }

  late final _TA_SetCompatibilityPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'TA_SetCompatibility');
  late final _TA_SetCompatibility =
      _TA_SetCompatibilityPtr.asFunction<int Function(int)>();

  TA_Compatibility TA_GetCompatibility() {
    return TA_Compatibility.fromValue(_TA_GetCompatibility());
  }

  late final _TA_GetCompatibilityPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'TA_GetCompatibility');
  late final _TA_GetCompatibility =
      _TA_GetCompatibilityPtr.asFunction<int Function()>();

  TA_RetCode TA_SetCandleSettings(
    TA_CandleSettingType settingType,
    TA_RangeType rangeType,
    int avgPeriod,
    double factor,
  ) {
    return TA_RetCode.fromValue(_TA_SetCandleSettings(
      settingType.value,
      rangeType.value,
      avgPeriod,
      factor,
    ));
  }

  late final _TA_SetCandleSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int,
              ffi.Double)>>('TA_SetCandleSettings');
  late final _TA_SetCandleSettings = _TA_SetCandleSettingsPtr.asFunction<
      int Function(int, int, int, double)>();

  TA_RetCode TA_RestoreCandleDefaultSettings(
    TA_CandleSettingType settingType,
  ) {
    return TA_RetCode.fromValue(_TA_RestoreCandleDefaultSettings(
      settingType.value,
    ));
  }

  late final _TA_RestoreCandleDefaultSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'TA_RestoreCandleDefaultSettings');
  late final _TA_RestoreCandleDefaultSettings =
      _TA_RestoreCandleDefaultSettingsPtr.asFunction<int Function(int)>();
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef fpos_t = __darwin_off_t;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef Int32 = ffi.Int;
typedef DartInt32 = int;
typedef UInt32 = ffi.UnsignedInt;
typedef DartUInt32 = int;
typedef Int64 = ffi.Long;
typedef DartInt64 = int;
typedef UInt64 = ffi.UnsignedLong;
typedef DartUInt64 = int;

enum TA_RetCode {
  TA_SUCCESS(0),
  TA_LIB_NOT_INITIALIZE(1),
  TA_BAD_PARAM(2),
  TA_ALLOC_ERR(3),
  TA_GROUP_NOT_FOUND(4),
  TA_FUNC_NOT_FOUND(5),
  TA_INVALID_HANDLE(6),
  TA_INVALID_PARAM_HOLDER(7),
  TA_INVALID_PARAM_HOLDER_TYPE(8),
  TA_INVALID_PARAM_FUNCTION(9),
  TA_INPUT_NOT_ALL_INITIALIZE(10),
  TA_OUTPUT_NOT_ALL_INITIALIZE(11),
  TA_OUT_OF_RANGE_START_INDEX(12),
  TA_OUT_OF_RANGE_END_INDEX(13),
  TA_INVALID_LIST_TYPE(14),
  TA_BAD_OBJECT(15),
  TA_NOT_SUPPORTED(16),
  TA_INTERNAL_ERROR(5000),
  TA_UNKNOWN_ERR(65535);

  final int value;
  const TA_RetCode(this.value);

  static TA_RetCode fromValue(int value) => switch (value) {
        0 => TA_SUCCESS,
        1 => TA_LIB_NOT_INITIALIZE,
        2 => TA_BAD_PARAM,
        3 => TA_ALLOC_ERR,
        4 => TA_GROUP_NOT_FOUND,
        5 => TA_FUNC_NOT_FOUND,
        6 => TA_INVALID_HANDLE,
        7 => TA_INVALID_PARAM_HOLDER,
        8 => TA_INVALID_PARAM_HOLDER_TYPE,
        9 => TA_INVALID_PARAM_FUNCTION,
        10 => TA_INPUT_NOT_ALL_INITIALIZE,
        11 => TA_OUTPUT_NOT_ALL_INITIALIZE,
        12 => TA_OUT_OF_RANGE_START_INDEX,
        13 => TA_OUT_OF_RANGE_END_INDEX,
        14 => TA_INVALID_LIST_TYPE,
        15 => TA_BAD_OBJECT,
        16 => TA_NOT_SUPPORTED,
        5000 => TA_INTERNAL_ERROR,
        65535 => TA_UNKNOWN_ERR,
        _ => throw ArgumentError("Unknown value for TA_RetCode: $value"),
      };
}

enum TA_Compatibility {
  TA_COMPATIBILITY_DEFAULT(0),
  TA_COMPATIBILITY_METASTOCK(1);

  final int value;
  const TA_Compatibility(this.value);

  static TA_Compatibility fromValue(int value) => switch (value) {
        0 => TA_COMPATIBILITY_DEFAULT,
        1 => TA_COMPATIBILITY_METASTOCK,
        _ => throw ArgumentError("Unknown value for TA_Compatibility: $value"),
      };
}

enum TA_MAType {
  TA_MAType_SMA(0),
  TA_MAType_EMA(1),
  TA_MAType_WMA(2),
  TA_MAType_DEMA(3),
  TA_MAType_TEMA(4),
  TA_MAType_TRIMA(5),
  TA_MAType_KAMA(6),
  TA_MAType_MAMA(7),
  TA_MAType_T3(8);

  final int value;
  const TA_MAType(this.value);

  static TA_MAType fromValue(int value) => switch (value) {
        0 => TA_MAType_SMA,
        1 => TA_MAType_EMA,
        2 => TA_MAType_WMA,
        3 => TA_MAType_DEMA,
        4 => TA_MAType_TEMA,
        5 => TA_MAType_TRIMA,
        6 => TA_MAType_KAMA,
        7 => TA_MAType_MAMA,
        8 => TA_MAType_T3,
        _ => throw ArgumentError("Unknown value for TA_MAType: $value"),
      };
}

enum TA_FuncUnstId {
  TA_FUNC_UNST_ADX(0),
  TA_FUNC_UNST_ADXR(1),
  TA_FUNC_UNST_ATR(2),
  TA_FUNC_UNST_CMO(3),
  TA_FUNC_UNST_DX(4),
  TA_FUNC_UNST_EMA(5),
  TA_FUNC_UNST_HT_DCPERIOD(6),
  TA_FUNC_UNST_HT_DCPHASE(7),
  TA_FUNC_UNST_HT_PHASOR(8),
  TA_FUNC_UNST_HT_SINE(9),
  TA_FUNC_UNST_HT_TRENDLINE(10),
  TA_FUNC_UNST_HT_TRENDMODE(11),
  TA_FUNC_UNST_IMI(12),
  TA_FUNC_UNST_KAMA(13),
  TA_FUNC_UNST_MAMA(14),
  TA_FUNC_UNST_MFI(15),
  TA_FUNC_UNST_MINUS_DI(16),
  TA_FUNC_UNST_MINUS_DM(17),
  TA_FUNC_UNST_NATR(18),
  TA_FUNC_UNST_PLUS_DI(19),
  TA_FUNC_UNST_PLUS_DM(20),
  TA_FUNC_UNST_RSI(21),
  TA_FUNC_UNST_STOCHRSI(22),
  TA_FUNC_UNST_T3(23),
  TA_FUNC_UNST_ALL(24),
  TA_FUNC_UNST_NONE(-1);

  final int value;
  const TA_FuncUnstId(this.value);

  static TA_FuncUnstId fromValue(int value) => switch (value) {
        0 => TA_FUNC_UNST_ADX,
        1 => TA_FUNC_UNST_ADXR,
        2 => TA_FUNC_UNST_ATR,
        3 => TA_FUNC_UNST_CMO,
        4 => TA_FUNC_UNST_DX,
        5 => TA_FUNC_UNST_EMA,
        6 => TA_FUNC_UNST_HT_DCPERIOD,
        7 => TA_FUNC_UNST_HT_DCPHASE,
        8 => TA_FUNC_UNST_HT_PHASOR,
        9 => TA_FUNC_UNST_HT_SINE,
        10 => TA_FUNC_UNST_HT_TRENDLINE,
        11 => TA_FUNC_UNST_HT_TRENDMODE,
        12 => TA_FUNC_UNST_IMI,
        13 => TA_FUNC_UNST_KAMA,
        14 => TA_FUNC_UNST_MAMA,
        15 => TA_FUNC_UNST_MFI,
        16 => TA_FUNC_UNST_MINUS_DI,
        17 => TA_FUNC_UNST_MINUS_DM,
        18 => TA_FUNC_UNST_NATR,
        19 => TA_FUNC_UNST_PLUS_DI,
        20 => TA_FUNC_UNST_PLUS_DM,
        21 => TA_FUNC_UNST_RSI,
        22 => TA_FUNC_UNST_STOCHRSI,
        23 => TA_FUNC_UNST_T3,
        24 => TA_FUNC_UNST_ALL,
        -1 => TA_FUNC_UNST_NONE,
        _ => throw ArgumentError("Unknown value for TA_FuncUnstId: $value"),
      };
}

enum TA_RangeType {
  TA_RangeType_RealBody(0),
  TA_RangeType_HighLow(1),
  TA_RangeType_Shadows(2);

  final int value;
  const TA_RangeType(this.value);

  static TA_RangeType fromValue(int value) => switch (value) {
        0 => TA_RangeType_RealBody,
        1 => TA_RangeType_HighLow,
        2 => TA_RangeType_Shadows,
        _ => throw ArgumentError("Unknown value for TA_RangeType: $value"),
      };
}

enum TA_CandleSettingType {
  TA_BodyLong(0),
  TA_BodyVeryLong(1),
  TA_BodyShort(2),
  TA_BodyDoji(3),
  TA_ShadowLong(4),
  TA_ShadowVeryLong(5),
  TA_ShadowShort(6),
  TA_ShadowVeryShort(7),
  TA_Near(8),
  TA_Far(9),
  TA_Equal(10),
  TA_AllCandleSettings(11);

  final int value;
  const TA_CandleSettingType(this.value);

  static TA_CandleSettingType fromValue(int value) => switch (value) {
        0 => TA_BodyLong,
        1 => TA_BodyVeryLong,
        2 => TA_BodyShort,
        3 => TA_BodyDoji,
        4 => TA_ShadowLong,
        5 => TA_ShadowVeryLong,
        6 => TA_ShadowShort,
        7 => TA_ShadowVeryShort,
        8 => TA_Near,
        9 => TA_Far,
        10 => TA_Equal,
        11 => TA_AllCandleSettings,
        _ =>
          throw ArgumentError("Unknown value for TA_CandleSettingType: $value"),
      };
}

typedef TA_Real = ffi.Double;
typedef DartTA_Real = double;
typedef TA_Integer = ffi.Int;
typedef DartTA_Integer = int;

final class TA_StringTable extends ffi.Struct {
  @ffi.UnsignedInt()
  external int size;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> string;

  external ffi.Pointer<ffi.Void> hiddenData;
}

final class TA_RetCodeInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> enumStr;

  external ffi.Pointer<ffi.Char> infoStr;
}

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 140000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int __DARWIN_CLK_TCK = 100;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int CHAR_BIT = 8;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 8192;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 64;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 18;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -16381;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -4931;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 16384;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 4932;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = double.infinity;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 1.0842021724855044e-19;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 0.0;

const int DECIMAL_DIG = 21;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 0.0;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 21;

const int __64BIT__ = 1;

const int TA_INTEGER_MIN = -2147483647;

const int TA_INTEGER_MAX = 2147483647;

const double TA_REAL_MIN = -3e+37;

const double TA_REAL_MAX = 3e+37;

const int TA_INTEGER_DEFAULT = -2147483648;

const double TA_REAL_DEFAULT = -4e+37;
